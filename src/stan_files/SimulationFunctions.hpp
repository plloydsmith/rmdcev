/*
    rmdcev is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rmdcev is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rmdcev.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_SimulationFunctions_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_SimulationFunctions");
    reader.add_event(652, 650, "end", "model_SimulationFunctions");
    return reader;
}

template <typename T0__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
Shuffle_rng(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& inv,
                const int& nerrs, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        validate_non_negative_index("out", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(nerrs));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out,DUMMY_VAR__);
        current_statement_begin__ = 7;
        validate_non_negative_index("temp1", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  temp1(static_cast<Eigen::VectorXd::Index>(nerrs));
        (void) temp1;  // dummy to suppress unused var warning

        stan::math::initialize(temp1, DUMMY_VAR__);
        stan::math::fill(temp1,DUMMY_VAR__);
        stan::math::assign(temp1,rep_row_vector(0,nerrs));
        current_statement_begin__ = 8;
        validate_non_negative_index("temp2", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  temp2(static_cast<Eigen::VectorXd::Index>(nerrs));
        (void) temp2;  // dummy to suppress unused var warning

        stan::math::initialize(temp2, DUMMY_VAR__);
        stan::math::fill(temp2,DUMMY_VAR__);
        stan::math::assign(temp2,to_row_vector(uniform_rng(temp1,1, base_rng__)));


        current_statement_begin__ = 9;
        stan::math::assign(out, stan::model::rvalue(inv, stan::model::cons_list(stan::model::index_multi(sort_indices_asc(temp2)), stan::model::nil_index_list()), "inv"));
        current_statement_begin__ = 11;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct Shuffle_rng_functor__ {
    template <typename T0__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& inv,
                const int& nerrs, RNG& base_rng__, std::ostream* pstream__) const {
        return Shuffle_rng(inv, nerrs, base_rng__, pstream__);
    }
};

template <class RNG>
Eigen::Matrix<double, 1,Eigen::Dynamic>
DrawMlhs_rng(const int& nerrs,
                 const int& draw_mlhs, RNG& base_rng__, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 20;
        validate_non_negative_index("error", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  error(static_cast<Eigen::VectorXd::Index>(nerrs));
        (void) error;  // dummy to suppress unused var warning

        stan::math::initialize(error, DUMMY_VAR__);
        stan::math::fill(error,DUMMY_VAR__);
        current_statement_begin__ = 21;
        validate_non_negative_index("temp0", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  temp0(static_cast<Eigen::VectorXd::Index>(nerrs));
        (void) temp0;  // dummy to suppress unused var warning

        stan::math::initialize(temp0, DUMMY_VAR__);
        stan::math::fill(temp0,DUMMY_VAR__);
        stan::math::assign(temp0,rep_row_vector(0,nerrs));


        current_statement_begin__ = 23;
        if (as_bool(logical_eq(draw_mlhs,0))) {

            current_statement_begin__ = 24;
            stan::math::assign(error, to_row_vector(uniform_rng(temp0,1, base_rng__)));
        } else if (as_bool(logical_eq(draw_mlhs,1))) {
            {
            current_statement_begin__ = 26;
            validate_non_negative_index("temp1", "nerrs", nerrs);
            vector<int> temp1(nerrs, 0);
            stan::math::fill(temp1, std::numeric_limits<int>::min());
            current_statement_begin__ = 27;
            validate_non_negative_index("temp", "nerrs", nerrs);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  temp(static_cast<Eigen::VectorXd::Index>(nerrs));
            (void) temp;  // dummy to suppress unused var warning

            stan::math::initialize(temp, DUMMY_VAR__);
            stan::math::fill(temp,DUMMY_VAR__);


            current_statement_begin__ = 29;
            for (int err = 1; err <= nerrs; ++err) {
                current_statement_begin__ = 30;
                stan::model::assign(temp1, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                            (err - 1), 
                            "assigning variable temp1");
            }
            current_statement_begin__ = 32;
            stan::math::assign(temp, divide(to_row_vector(temp1),nerrs));
            current_statement_begin__ = 33;
            stan::math::assign(error, Shuffle_rng(add(temp,divide(to_row_vector(uniform_rng(temp0,1, base_rng__)),nerrs)),nerrs, base_rng__, pstream__));
            }
        }
        current_statement_begin__ = 35;
        return stan::math::promote_scalar<fun_return_scalar_t__>(error);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct DrawMlhs_rng_functor__ {
    template <class RNG>
        Eigen::Matrix<double, 1,Eigen::Dynamic>
    operator()(const int& nerrs,
                 const int& draw_mlhs, RNG& base_rng__, std::ostream* pstream__) const {
        return DrawMlhs_rng(nerrs, draw_mlhs, base_rng__, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, class RNG>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type, Eigen::Dynamic,1> >
DrawError_rng(const T0__& quant_num,
                  const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                  const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price_j,
                  const Eigen::Matrix<T3__, Eigen::Dynamic,1>& psi_j,
                  const Eigen::Matrix<T4__, Eigen::Dynamic,1>& gamma_j,
                  const Eigen::Matrix<T5__, Eigen::Dynamic,1>& alpha,
                  const T6__& scale,
                  const int& ngoods,
                  const int& nerrs,
                  const int& cond_error,
                  const int& draw_mlhs, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 42;
        validate_non_negative_index("out", "(ngoods + 1)", (ngoods + 1));
        validate_non_negative_index("out", "nerrs", nerrs);
        vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > out(nerrs, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((ngoods + 1)))));
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out,DUMMY_VAR__);
        current_statement_begin__ = 43;
        validate_non_negative_index("error", "(ngoods + 1)", (ngoods + 1));
        validate_non_negative_index("error", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  error(static_cast<Eigen::VectorXd::Index>((ngoods + 1)),static_cast<Eigen::VectorXd::Index>(nerrs));
        (void) error;  // dummy to suppress unused var warning

        stan::math::initialize(error, DUMMY_VAR__);
        stan::math::fill(error,DUMMY_VAR__);
        current_statement_begin__ = 44;
        validate_non_negative_index("error_t", "nerrs", nerrs);
        validate_non_negative_index("error_t", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  error_t(static_cast<Eigen::VectorXd::Index>(nerrs),static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) error_t;  // dummy to suppress unused var warning

        stan::math::initialize(error_t, DUMMY_VAR__);
        stan::math::fill(error_t,DUMMY_VAR__);
        current_statement_begin__ = 45;
        validate_non_negative_index("temp0", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  temp0(static_cast<Eigen::VectorXd::Index>(nerrs));
        (void) temp0;  // dummy to suppress unused var warning

        stan::math::initialize(temp0, DUMMY_VAR__);
        stan::math::fill(temp0,DUMMY_VAR__);
        stan::math::assign(temp0,rep_vector(0,nerrs));


        current_statement_begin__ = 47;
        if (as_bool(logical_eq(cond_error,0))) {

            current_statement_begin__ = 49;
            for (int j = 1; j <= (ngoods + 1); ++j) {
                current_statement_begin__ = 50;
                stan::model::assign(error, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            multiply(minus(stan::math::log(minus(stan::math::log(DrawMlhs_rng(nerrs,draw_mlhs, base_rng__, pstream__))))),scale), 
                            "assigning variable error");
            }
        } else if (as_bool(logical_eq(cond_error,1))) {
            {
            current_statement_begin__ = 54;
            validate_non_negative_index("cond_demand", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  cond_demand(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) cond_demand;  // dummy to suppress unused var warning

            stan::math::initialize(cond_demand, DUMMY_VAR__);
            stan::math::fill(cond_demand,DUMMY_VAR__);
            stan::math::assign(cond_demand,append_row(quant_num,quant_j));
            current_statement_begin__ = 56;
            local_scalar_t__ v1;
            (void) v1;  // dummy to suppress unused var warning

            stan::math::initialize(v1, DUMMY_VAR__);
            stan::math::fill(v1,DUMMY_VAR__);
            stan::math::assign(v1,((get_base1(alpha,1,"alpha",1) - 1) * stan::math::log(quant_num)));
            current_statement_begin__ = 57;
            validate_non_negative_index("vk", "ngoods", ngoods);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  vk(static_cast<Eigen::VectorXd::Index>(ngoods));
            (void) vk;  // dummy to suppress unused var warning

            stan::math::initialize(vk, DUMMY_VAR__);
            stan::math::fill(vk,DUMMY_VAR__);
            stan::math::assign(vk,subtract(add(psi_j,elt_multiply(subtract(stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "alpha"),1),stan::math::log(add(elt_divide(quant_j,gamma_j),1)))),stan::math::log(price_j)));
            current_statement_begin__ = 59;
            validate_non_negative_index("ek", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ek(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) ek;  // dummy to suppress unused var warning

            stan::math::initialize(ek, DUMMY_VAR__);
            stan::math::fill(ek,DUMMY_VAR__);
            stan::math::assign(ek,append_row(0,divide(subtract(v1,vk),scale)));


            current_statement_begin__ = 63;
            for (int j = 1; j <= (ngoods + 1); ++j) {
                current_statement_begin__ = 64;
                stan::model::assign(error, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (logical_gt(get_base1(cond_demand,j,"cond_demand",1),0) ? stan::math::promote_scalar<local_scalar_t__>(rep_row_vector((get_base1(ek,j,"ek",1) * scale),nerrs)) : stan::math::promote_scalar<local_scalar_t__>(multiply(minus(stan::math::log(minus(stan::math::log(multiply(DrawMlhs_rng(nerrs,draw_mlhs, base_rng__, pstream__),stan::math::exp(-(stan::math::exp(-(get_base1(ek,j,"ek",1)))))))))),scale)) ), 
                            "assigning variable error");
            }
            }
        }
        current_statement_begin__ = 68;
        stan::math::assign(error_t, transpose(error));
        current_statement_begin__ = 69;
        for (int err = 1; err <= nerrs; ++err) {
            current_statement_begin__ = 70;
            stan::model::assign(out, 
                        stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                        transpose(get_base1(error_t,err,"error_t",1)), 
                        "assigning variable out");
        }
        current_statement_begin__ = 71;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct DrawError_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, class RNG>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type, Eigen::Dynamic,1> >
    operator()(const T0__& quant_num,
                  const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                  const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price_j,
                  const Eigen::Matrix<T3__, Eigen::Dynamic,1>& psi_j,
                  const Eigen::Matrix<T4__, Eigen::Dynamic,1>& gamma_j,
                  const Eigen::Matrix<T5__, Eigen::Dynamic,1>& alpha,
                  const T6__& scale,
                  const int& ngoods,
                  const int& nerrs,
                  const int& cond_error,
                  const int& draw_mlhs, RNG& base_rng__, std::ostream* pstream__) const {
        return DrawError_rng(quant_num, quant_j, price_j, psi_j, gamma_j, alpha, scale, ngoods, nerrs, cond_error, draw_mlhs, base_rng__, pstream__);
    }
};

template <typename T0__>
std::vector<int>
CalcGoodOrder(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& MUzero,
                  const int& ngoods, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 80;
        validate_non_negative_index("order_x", "(ngoods + 1)", (ngoods + 1));
        vector<int> order_x((ngoods + 1), 0);
        stan::math::fill(order_x, std::numeric_limits<int>::min());
        current_statement_begin__ = 81;
        validate_non_negative_index("ord_goods", "ngoods", ngoods);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ord_goods(static_cast<Eigen::VectorXd::Index>(ngoods));
        (void) ord_goods;  // dummy to suppress unused var warning

        stan::math::initialize(ord_goods, DUMMY_VAR__);
        stan::math::fill(ord_goods,DUMMY_VAR__);
        current_statement_begin__ = 82;
        validate_non_negative_index("order_MU", "ngoods", ngoods);
        vector<int> order_MU(ngoods, 0);
        stan::math::fill(order_MU, std::numeric_limits<int>::min());
        stan::math::assign(order_MU,sort_indices_desc(stan::model::rvalue(MUzero, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "MUzero")));


        current_statement_begin__ = 84;
        for (int j = 1; j <= ngoods; ++j) {
            current_statement_begin__ = 85;
            stan::model::assign(ord_goods, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        j, 
                        "assigning variable ord_goods");
        }
        current_statement_begin__ = 87;
        stan::math::assign(order_x, sort_indices_asc(append_row(1.0,to_vector(add(stan::model::rvalue(ord_goods, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "ord_goods"),1)))));
        current_statement_begin__ = 88;
        return stan::math::promote_scalar<fun_return_scalar_t__>(order_x);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CalcGoodOrder_functor__ {
    template <typename T0__>
        std::vector<int>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& MUzero,
                  const int& ngoods, std::ostream* pstream__) const {
        return CalcGoodOrder(MUzero, ngoods, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
SortParmMatrix(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& MUzero,
                   const Eigen::Matrix<T1__, Eigen::Dynamic,1>& price,
                   const Eigen::Matrix<T2__, Eigen::Dynamic,1>& gamma,
                   const Eigen::Matrix<T3__, Eigen::Dynamic,1>& alpha,
                   const int& ngoods, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 96;
        validate_non_negative_index("parm_matrix", "(ngoods + 1)", (ngoods + 1));
        validate_non_negative_index("parm_matrix", "4", 4);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  parm_matrix(static_cast<Eigen::VectorXd::Index>((ngoods + 1)),static_cast<Eigen::VectorXd::Index>(4));
        (void) parm_matrix;  // dummy to suppress unused var warning

        stan::math::initialize(parm_matrix, DUMMY_VAR__);
        stan::math::fill(parm_matrix,DUMMY_VAR__);
        current_statement_begin__ = 97;
        validate_non_negative_index("MU_j", "ngoods", ngoods);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  MU_j(static_cast<Eigen::VectorXd::Index>(ngoods));
        (void) MU_j;  // dummy to suppress unused var warning

        stan::math::initialize(MU_j, DUMMY_VAR__);
        stan::math::fill(MU_j,DUMMY_VAR__);
        stan::math::assign(MU_j,stan::model::rvalue(MUzero, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "MUzero"));
        current_statement_begin__ = 98;
        validate_non_negative_index("price_j", "ngoods", ngoods);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  price_j(static_cast<Eigen::VectorXd::Index>(ngoods));
        (void) price_j;  // dummy to suppress unused var warning

        stan::math::initialize(price_j, DUMMY_VAR__);
        stan::math::fill(price_j,DUMMY_VAR__);
        stan::math::assign(price_j,stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"));
        current_statement_begin__ = 99;
        validate_non_negative_index("gamma_j", "ngoods", ngoods);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  gamma_j(static_cast<Eigen::VectorXd::Index>(ngoods));
        (void) gamma_j;  // dummy to suppress unused var warning

        stan::math::initialize(gamma_j, DUMMY_VAR__);
        stan::math::fill(gamma_j,DUMMY_VAR__);
        stan::math::assign(gamma_j,stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "gamma"));
        current_statement_begin__ = 100;
        validate_non_negative_index("alpha_j", "ngoods", ngoods);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha_j(static_cast<Eigen::VectorXd::Index>(ngoods));
        (void) alpha_j;  // dummy to suppress unused var warning

        stan::math::initialize(alpha_j, DUMMY_VAR__);
        stan::math::fill(alpha_j,DUMMY_VAR__);
        stan::math::assign(alpha_j,stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "alpha"));
        current_statement_begin__ = 101;
        validate_non_negative_index("order_MU", "ngoods", ngoods);
        vector<int> order_MU(ngoods, 0);
        stan::math::fill(order_MU, std::numeric_limits<int>::min());
        stan::math::assign(order_MU,sort_indices_desc(MU_j));


        current_statement_begin__ = 103;
        stan::math::assign(parm_matrix, append_col(append_row(get_base1(MUzero,1,"MUzero",1),stan::model::rvalue(MU_j, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "MU_j")),append_col(append_row(get_base1(price,1,"price",1),stan::model::rvalue(price_j, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "price_j")),append_col(append_row(get_base1(gamma,1,"gamma",1),stan::model::rvalue(gamma_j, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "gamma_j")),append_row(get_base1(alpha,1,"alpha",1),stan::model::rvalue(alpha_j, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "alpha_j"))))));
        current_statement_begin__ = 106;
        return stan::math::promote_scalar<fun_return_scalar_t__>(parm_matrix);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct SortParmMatrix_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& MUzero,
                   const Eigen::Matrix<T1__, Eigen::Dynamic,1>& price,
                   const Eigen::Matrix<T2__, Eigen::Dynamic,1>& gamma,
                   const Eigen::Matrix<T3__, Eigen::Dynamic,1>& alpha,
                   const int& ngoods, std::ostream* pstream__) const {
        return SortParmMatrix(MUzero, price, gamma, alpha, ngoods, pstream__);
    }
};

template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type
ComputeE(const int& M,
             const T1__& lambda,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& g_price,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& b,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& c,
             const Eigen::Matrix<T5__, Eigen::Dynamic,1>& d, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 110;
        local_scalar_t__ output;
        (void) output;  // dummy to suppress unused var warning

        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output,DUMMY_VAR__);
        current_statement_begin__ = 111;
        validate_non_negative_index("temp", "M", M);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  temp(static_cast<Eigen::VectorXd::Index>(M));
        (void) temp;  // dummy to suppress unused var warning

        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp,DUMMY_VAR__);


        current_statement_begin__ = 112;
        for (int m = 1; m <= M; ++m) {
            current_statement_begin__ = 113;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                        (get_base1(g_price,m,"g_price",1) * ((pow(lambda,get_base1(b,m,"b",1)) / get_base1(c,m,"c",1)) - get_base1(d,m,"d",1))), 
                        "assigning variable temp");
        }
        current_statement_begin__ = 114;
        stan::math::assign(output, sum(temp));
        current_statement_begin__ = 115;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ComputeE_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type
    operator()(const int& M,
             const T1__& lambda,
             const Eigen::Matrix<T2__, Eigen::Dynamic,1>& g_price,
             const Eigen::Matrix<T3__, Eigen::Dynamic,1>& b,
             const Eigen::Matrix<T4__, Eigen::Dynamic,1>& c,
             const Eigen::Matrix<T5__, Eigen::Dynamic,1>& d, std::ostream* pstream__) const {
        return ComputeE(M, lambda, g_price, b, c, d, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__>::type>::type, Eigen::Dynamic,1>
MarshallianDemand(const T0__& income,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& price,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,1>& MUzero,
                      const Eigen::Matrix<T3__, Eigen::Dynamic,1>& gamma,
                      const Eigen::Matrix<T4__, Eigen::Dynamic,1>& alpha,
                      const int& ngoods,
                      const int& algo_gen,
                      const T7__& tol_e,
                      const int& max_loop, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 124;
        validate_non_negative_index("mdemand", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mdemand(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) mdemand;  // dummy to suppress unused var warning

        stan::math::initialize(mdemand, DUMMY_VAR__);
        stan::math::fill(mdemand,DUMMY_VAR__);
        current_statement_begin__ = 125;
        local_scalar_t__ lambda;
        (void) lambda;  // dummy to suppress unused var warning

        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda,DUMMY_VAR__);
        current_statement_begin__ = 126;
        int M(0);
        (void) M;  // dummy to suppress unused var warning

        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,1);
        current_statement_begin__ = 127;
        int exit(0);
        (void) exit;  // dummy to suppress unused var warning

        stan::math::fill(exit, std::numeric_limits<int>::min());
        stan::math::assign(exit,0);
        current_statement_begin__ = 128;
        local_scalar_t__ E;
        (void) E;  // dummy to suppress unused var warning

        stan::math::initialize(E, DUMMY_VAR__);
        stan::math::fill(E,DUMMY_VAR__);
        current_statement_begin__ = 129;
        validate_non_negative_index("order_x", "(ngoods + 1)", (ngoods + 1));
        vector<int> order_x((ngoods + 1), 0);
        stan::math::fill(order_x, std::numeric_limits<int>::min());
        stan::math::assign(order_x,CalcGoodOrder(MUzero,ngoods, pstream__));
        current_statement_begin__ = 130;
        validate_non_negative_index("X", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  X(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) X;  // dummy to suppress unused var warning

        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X,DUMMY_VAR__);
        stan::math::assign(X,rep_vector(0,(ngoods + 1)));
        current_statement_begin__ = 131;
        validate_non_negative_index("d", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  d(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) d;  // dummy to suppress unused var warning

        stan::math::initialize(d, DUMMY_VAR__);
        stan::math::fill(d,DUMMY_VAR__);
        stan::math::assign(d,append_row(0,rep_vector(1,ngoods)));
        current_statement_begin__ = 132;
        validate_non_negative_index("parm_matrix", "(ngoods + 1)", (ngoods + 1));
        validate_non_negative_index("parm_matrix", "4", 4);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  parm_matrix(static_cast<Eigen::VectorXd::Index>((ngoods + 1)),static_cast<Eigen::VectorXd::Index>(4));
        (void) parm_matrix;  // dummy to suppress unused var warning

        stan::math::initialize(parm_matrix, DUMMY_VAR__);
        stan::math::fill(parm_matrix,DUMMY_VAR__);
        stan::math::assign(parm_matrix,SortParmMatrix(MUzero,price,gamma,alpha,ngoods, pstream__));
        current_statement_begin__ = 133;
        validate_non_negative_index("mu", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        stan::math::assign(mu,col(parm_matrix,1));
        current_statement_begin__ = 134;
        validate_non_negative_index("g", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  g(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) g;  // dummy to suppress unused var warning

        stan::math::initialize(g, DUMMY_VAR__);
        stan::math::fill(g,DUMMY_VAR__);
        stan::math::assign(g,col(parm_matrix,3));
        current_statement_begin__ = 135;
        validate_non_negative_index("g_price", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  g_price(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) g_price;  // dummy to suppress unused var warning

        stan::math::initialize(g_price, DUMMY_VAR__);
        stan::math::fill(g_price,DUMMY_VAR__);
        stan::math::assign(g_price,elt_multiply(g,col(parm_matrix,2)));


        current_statement_begin__ = 137;
        if (as_bool(logical_eq(algo_gen,0))) {
            {
            current_statement_begin__ = 138;
            local_scalar_t__ lambda_num;
            (void) lambda_num;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_num, DUMMY_VAR__);
            stan::math::fill(lambda_num,DUMMY_VAR__);
            current_statement_begin__ = 139;
            local_scalar_t__ lambda_den;
            (void) lambda_den;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_den, DUMMY_VAR__);
            stan::math::fill(lambda_den,DUMMY_VAR__);
            current_statement_begin__ = 140;
            local_scalar_t__ alpha_1;
            (void) alpha_1;  // dummy to suppress unused var warning

            stan::math::initialize(alpha_1, DUMMY_VAR__);
            stan::math::fill(alpha_1,DUMMY_VAR__);
            stan::math::assign(alpha_1,get_base1(alpha,1,"alpha",1));
            current_statement_begin__ = 141;
            validate_non_negative_index("b", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) b;  // dummy to suppress unused var warning

            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b,DUMMY_VAR__);
            current_statement_begin__ = 142;
            validate_non_negative_index("c", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  c(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) c;  // dummy to suppress unused var warning

            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c,DUMMY_VAR__);


            current_statement_begin__ = 144;
            for (int j = 1; j <= (ngoods + 1); ++j) {
                current_statement_begin__ = 145;
                stan::model::assign(b, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            pow(get_base1(mu,j,"mu",1),inv((1 - alpha_1))), 
                            "assigning variable b");
            }
            current_statement_begin__ = 147;
            stan::math::assign(c, elt_multiply(g_price,b));
            current_statement_begin__ = 149;
            while (as_bool(logical_eq(exit,0))) {

                current_statement_begin__ = 151;
                stan::math::assign(lambda_num, ((income + sum(stan::model::rvalue(g_price, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "g_price"))) - 1));
                current_statement_begin__ = 152;
                stan::math::assign(lambda_den, sum(stan::model::rvalue(c, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "c")));
                current_statement_begin__ = 153;
                stan::math::assign(lambda, pow((lambda_num / lambda_den),(alpha_1 - 1)));
                current_statement_begin__ = 159;
                if (as_bool((primitive_value(logical_gt(lambda,get_base1(mu,std::min((M + 1),(ngoods + 1)),"mu",1))) || primitive_value(logical_eq(M,(ngoods + 1)))))) {

                    current_statement_begin__ = 161;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 162;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    ((pow((lambda / get_base1(mu,m,"mu",1)),inv((alpha_1 - 1))) - get_base1(d,m,"d",1)) * get_base1(g,m,"g",1)), 
                                    "assigning variable X");
                    }
                    current_statement_begin__ = 163;
                    stan::math::assign(exit, 1);
                } else if (as_bool(logical_lt(M,(ngoods + 1)))) {
                    current_statement_begin__ = 166;
                    stan::math::assign(M, (M + 1));
                }
            }
            }
        } else if (as_bool(logical_eq(algo_gen,1))) {
            {
            current_statement_begin__ = 170;
            local_scalar_t__ lambda_l;
            (void) lambda_l;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_l, DUMMY_VAR__);
            stan::math::fill(lambda_l,DUMMY_VAR__);
            current_statement_begin__ = 171;
            local_scalar_t__ lambda_u;
            (void) lambda_u;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_u, DUMMY_VAR__);
            stan::math::fill(lambda_u,DUMMY_VAR__);
            current_statement_begin__ = 172;
            validate_non_negative_index("c", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  c(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) c;  // dummy to suppress unused var warning

            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c,DUMMY_VAR__);
            current_statement_begin__ = 173;
            validate_non_negative_index("b_temp", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b_temp(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) b_temp;  // dummy to suppress unused var warning

            stan::math::initialize(b_temp, DUMMY_VAR__);
            stan::math::fill(b_temp,DUMMY_VAR__);
            stan::math::assign(b_temp,col(parm_matrix,4));
            current_statement_begin__ = 174;
            validate_non_negative_index("b", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) b;  // dummy to suppress unused var warning

            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b,DUMMY_VAR__);
            stan::math::assign(b,inv(subtract(append_row(get_base1(b_temp,1,"b_temp",1),stan::model::rvalue(b_temp, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "b_temp")),1)));


            current_statement_begin__ = 176;
            for (int j = 1; j <= (ngoods + 1); ++j) {
                current_statement_begin__ = 177;
                stan::model::assign(c, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            pow(get_base1(mu,j,"mu",1),get_base1(b,j,"b",1)), 
                            "assigning variable c");
            }
            current_statement_begin__ = 179;
            while (as_bool(logical_eq(exit,0))) {

                current_statement_begin__ = 180;
                stan::math::assign(lambda, get_base1(mu,(M + 1),"mu",1));
                current_statement_begin__ = 182;
                stan::math::assign(E, ComputeE(M,lambda,g_price,b,c,d, pstream__));
                current_statement_begin__ = 184;
                if (as_bool((primitive_value(logical_gte(E,income)) || primitive_value(logical_eq((M + 1),(ngoods + 1)))))) {

                    current_statement_begin__ = 185;
                    if (as_bool(logical_lt(E,income))) {
                        current_statement_begin__ = 186;
                        stan::math::assign(M, (M + 1));
                    }
                    current_statement_begin__ = 188;
                    stan::math::assign(lambda_l, (logical_lt(E,income) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(lambda) ));
                    current_statement_begin__ = 189;
                    stan::math::assign(lambda_u, get_base1(mu,M,"mu",1));
                    current_statement_begin__ = 190;
                    stan::math::assign(lambda, ((lambda_l + lambda_u) / 2));
                    current_statement_begin__ = 192;
                    for (int n = 1; n <= max_loop; ++n) {
                        {
                        current_statement_begin__ = 193;
                        local_scalar_t__ lambda_mid;
                        (void) lambda_mid;  // dummy to suppress unused var warning

                        stan::math::initialize(lambda_mid, DUMMY_VAR__);
                        stan::math::fill(lambda_mid,DUMMY_VAR__);
                        stan::math::assign(lambda_mid,((lambda_l + lambda_u) / 2));


                        current_statement_begin__ = 195;
                        stan::math::assign(E, ComputeE(M,lambda,g_price,b,c,d, pstream__));
                        current_statement_begin__ = 198;
                        if (as_bool(logical_lt(E,income))) {
                            current_statement_begin__ = 199;
                            stan::math::assign(lambda_u, lambda_mid);
                        } else if (as_bool(logical_gt(E,income))) {
                            current_statement_begin__ = 201;
                            stan::math::assign(lambda_l, lambda_mid);
                        }
                        current_statement_begin__ = 204;
                        stan::math::assign(lambda, ((lambda_l + lambda_u) / 2));
                        current_statement_begin__ = 206;
                        if (as_bool(logical_lt(stan::math::fabs((((E - income) / (E + income)) * 0.5)),tol_e))) {
                            current_statement_begin__ = 206;
                            break;
                        }
                        }
                    }
                    current_statement_begin__ = 209;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 210;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    ((pow((lambda / get_base1(mu,m,"mu",1)),get_base1(b,m,"b",1)) - get_base1(d,m,"d",1)) * get_base1(g,m,"g",1)), 
                                    "assigning variable X");
                    }
                    current_statement_begin__ = 211;
                    stan::math::assign(exit, 1);
                } else if (as_bool((primitive_value(logical_lt(E,income)) && primitive_value(logical_lt((M + 1),(ngoods + 1)))))) {
                    current_statement_begin__ = 214;
                    stan::math::assign(M, (M + 1));
                }
            }
            }
        }
        current_statement_begin__ = 218;
        stan::math::assign(mdemand, stan::model::rvalue(X, stan::model::cons_list(stan::model::index_multi(order_x), stan::model::nil_index_list()), "X"));
        current_statement_begin__ = 219;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mdemand);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct MarshallianDemand_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T7__>::type>::type, Eigen::Dynamic,1>
    operator()(const T0__& income,
                      const Eigen::Matrix<T1__, Eigen::Dynamic,1>& price,
                      const Eigen::Matrix<T2__, Eigen::Dynamic,1>& MUzero,
                      const Eigen::Matrix<T3__, Eigen::Dynamic,1>& gamma,
                      const Eigen::Matrix<T4__, Eigen::Dynamic,1>& alpha,
                      const int& ngoods,
                      const int& algo_gen,
                      const T7__& tol_e,
                      const int& max_loop, std::ostream* pstream__) const {
        return MarshallianDemand(income, price, MUzero, gamma, alpha, ngoods, algo_gen, tol_e, max_loop, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
ComputeUtilJ(const T0__& income,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price_j,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& psi_j,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& gamma_j,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& alpha,
                 const int& ngoods,
                 const int& model_num, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 229;
        local_scalar_t__ output;
        (void) output;  // dummy to suppress unused var warning

        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output,DUMMY_VAR__);
        current_statement_begin__ = 230;
        local_scalar_t__ util_num;
        (void) util_num;  // dummy to suppress unused var warning

        stan::math::initialize(util_num, DUMMY_VAR__);
        stan::math::fill(util_num,DUMMY_VAR__);
        current_statement_begin__ = 231;
        validate_non_negative_index("util_j", "ngoods", ngoods);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  util_j(static_cast<Eigen::VectorXd::Index>(ngoods));
        (void) util_j;  // dummy to suppress unused var warning

        stan::math::initialize(util_j, DUMMY_VAR__);
        stan::math::fill(util_j,DUMMY_VAR__);


        current_statement_begin__ = 233;
        stan::math::assign(util_num, ((1 / get_base1(alpha,1,"alpha",1)) * pow((income - multiply(transpose(price_j),quant_j)),get_base1(alpha,1,"alpha",1))));
        current_statement_begin__ = 235;
        if (as_bool(logical_eq(model_num,1))) {

            current_statement_begin__ = 236;
            stan::math::assign(util_j, elt_multiply(elt_multiply(psi_j,gamma_j),stan::math::log(add(elt_divide(quant_j,gamma_j),1))));
        } else if (as_bool(logical_neq(model_num,1))) {

            current_statement_begin__ = 238;
            for (int n = 1; n <= ngoods; ++n) {
                current_statement_begin__ = 239;
                stan::model::assign(util_j, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (((get_base1(psi_j,n,"psi_j",1) * get_base1(gamma_j,n,"gamma_j",1)) / get_base1(alpha,(n + 1),"alpha",1)) * (pow(((get_base1(quant_j,n,"quant_j",1) / get_base1(gamma_j,n,"gamma_j",1)) + 1),get_base1(alpha,(n + 1),"alpha",1)) - 1)), 
                            "assigning variable util_j");
            }
        }
        current_statement_begin__ = 243;
        stan::math::assign(output, (util_num + sum(util_j)));
        current_statement_begin__ = 244;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ComputeUtilJ_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
    operator()(const T0__& income,
                 const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price_j,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& psi_j,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& gamma_j,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& alpha,
                 const int& ngoods,
                 const int& model_num, std::ostream* pstream__) const {
        return ComputeUtilJ(income, quant_j, price_j, psi_j, gamma_j, alpha, ngoods, model_num, pstream__);
    }
};

template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type
ComputeUtilM(const int& M,
                 const T1__& lambda1,
                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& g_psi_a,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& a_a_1,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& mu_a_a_1,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& psi,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& g,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& price,
                 const Eigen::Matrix<T8__, Eigen::Dynamic,1>& d,
                 const int& model_num, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 252;
        local_scalar_t__ output;
        (void) output;  // dummy to suppress unused var warning

        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output,DUMMY_VAR__);
        current_statement_begin__ = 253;
        validate_non_negative_index("temp", "M", M);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  temp(static_cast<Eigen::VectorXd::Index>(M));
        (void) temp;  // dummy to suppress unused var warning

        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp,DUMMY_VAR__);


        current_statement_begin__ = 254;
        stan::model::assign(temp, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    (get_base1(g_psi_a,1,"g_psi_a",1) * ((pow(lambda1,get_base1(a_a_1,1,"a_a_1",1)) * get_base1(mu_a_a_1,1,"mu_a_a_1",1)) - get_base1(d,1,"d",1))), 
                    "assigning variable temp");
        current_statement_begin__ = 255;
        if (as_bool(logical_gt(M,1))) {

            current_statement_begin__ = 256;
            for (int m = 2; m <= M; ++m) {

                current_statement_begin__ = 257;
                if (as_bool(logical_eq(model_num,1))) {
                    current_statement_begin__ = 258;
                    stan::model::assign(temp, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                ((get_base1(psi,m,"psi",1) * get_base1(g,m,"g",1)) * stan::math::log((get_base1(psi,m,"psi",1) / (lambda1 * get_base1(price,m,"price",1))))), 
                                "assigning variable temp");
                } else if (as_bool(logical_neq(model_num,1))) {
                    current_statement_begin__ = 260;
                    stan::model::assign(temp, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                (get_base1(g_psi_a,m,"g_psi_a",1) * ((pow(lambda1,get_base1(a_a_1,m,"a_a_1",1)) * get_base1(mu_a_a_1,m,"mu_a_a_1",1)) - get_base1(d,m,"d",1))), 
                                "assigning variable temp");
                }
            }
        }
        current_statement_begin__ = 263;
        stan::math::assign(output, sum(temp));
        current_statement_begin__ = 264;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ComputeUtilM_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type
    operator()(const int& M,
                 const T1__& lambda1,
                 const Eigen::Matrix<T2__, Eigen::Dynamic,1>& g_psi_a,
                 const Eigen::Matrix<T3__, Eigen::Dynamic,1>& a_a_1,
                 const Eigen::Matrix<T4__, Eigen::Dynamic,1>& mu_a_a_1,
                 const Eigen::Matrix<T5__, Eigen::Dynamic,1>& psi,
                 const Eigen::Matrix<T6__, Eigen::Dynamic,1>& g,
                 const Eigen::Matrix<T7__, Eigen::Dynamic,1>& price,
                 const Eigen::Matrix<T8__, Eigen::Dynamic,1>& d,
                 const int& model_num, std::ostream* pstream__) const {
        return ComputeUtilM(M, lambda1, g_psi_a, a_a_1, mu_a_a_1, psi, g, price, d, model_num, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T8__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T8__>::type>::type, Eigen::Dynamic,1>
HicksianDemand(const T0__& util,
                   const Eigen::Matrix<T1__, Eigen::Dynamic,1>& price,
                   const Eigen::Matrix<T2__, Eigen::Dynamic,1>& MUzero,
                   const Eigen::Matrix<T3__, Eigen::Dynamic,1>& gamma,
                   const Eigen::Matrix<T4__, Eigen::Dynamic,1>& alpha,
                   const int& ngoods,
                   const int& algo_gen,
                   const int& model_num,
                   const T8__& tol_l,
                   const int& max_loop, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 274;
        validate_non_negative_index("hdemand", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hdemand(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) hdemand;  // dummy to suppress unused var warning

        stan::math::initialize(hdemand, DUMMY_VAR__);
        stan::math::fill(hdemand,DUMMY_VAR__);
        current_statement_begin__ = 275;
        int M(0);
        (void) M;  // dummy to suppress unused var warning

        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,1);
        current_statement_begin__ = 276;
        int exit(0);
        (void) exit;  // dummy to suppress unused var warning

        stan::math::fill(exit, std::numeric_limits<int>::min());
        stan::math::assign(exit,0);
        current_statement_begin__ = 277;
        local_scalar_t__ lambda1;
        (void) lambda1;  // dummy to suppress unused var warning

        stan::math::initialize(lambda1, DUMMY_VAR__);
        stan::math::fill(lambda1,DUMMY_VAR__);
        current_statement_begin__ = 278;
        local_scalar_t__ util_new;
        (void) util_new;  // dummy to suppress unused var warning

        stan::math::initialize(util_new, DUMMY_VAR__);
        stan::math::fill(util_new,DUMMY_VAR__);
        current_statement_begin__ = 279;
        validate_non_negative_index("order_x", "(ngoods + 1)", (ngoods + 1));
        vector<int> order_x((ngoods + 1), 0);
        stan::math::fill(order_x, std::numeric_limits<int>::min());
        stan::math::assign(order_x,CalcGoodOrder(MUzero,ngoods, pstream__));
        current_statement_begin__ = 280;
        validate_non_negative_index("X", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  X(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) X;  // dummy to suppress unused var warning

        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X,DUMMY_VAR__);
        stan::math::assign(X,rep_vector(0,(ngoods + 1)));
        current_statement_begin__ = 281;
        validate_non_negative_index("d", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  d(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) d;  // dummy to suppress unused var warning

        stan::math::initialize(d, DUMMY_VAR__);
        stan::math::fill(d,DUMMY_VAR__);
        stan::math::assign(d,append_row(0,rep_vector(1,ngoods)));
        current_statement_begin__ = 282;
        validate_non_negative_index("parm_matrix", "(ngoods + 1)", (ngoods + 1));
        validate_non_negative_index("parm_matrix", "4", 4);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  parm_matrix(static_cast<Eigen::VectorXd::Index>((ngoods + 1)),static_cast<Eigen::VectorXd::Index>(4));
        (void) parm_matrix;  // dummy to suppress unused var warning

        stan::math::initialize(parm_matrix, DUMMY_VAR__);
        stan::math::fill(parm_matrix,DUMMY_VAR__);
        stan::math::assign(parm_matrix,SortParmMatrix(MUzero,price,gamma,alpha,ngoods, pstream__));
        current_statement_begin__ = 283;
        validate_non_negative_index("mu", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        stan::math::assign(mu,col(parm_matrix,1));
        current_statement_begin__ = 284;
        validate_non_negative_index("g", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  g(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) g;  // dummy to suppress unused var warning

        stan::math::initialize(g, DUMMY_VAR__);
        stan::math::fill(g,DUMMY_VAR__);
        stan::math::assign(g,col(parm_matrix,3));


        current_statement_begin__ = 286;
        if (as_bool(logical_eq(algo_gen,0))) {
            {
            current_statement_begin__ = 287;
            local_scalar_t__ lambda_num;
            (void) lambda_num;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_num, DUMMY_VAR__);
            stan::math::fill(lambda_num,DUMMY_VAR__);
            current_statement_begin__ = 288;
            local_scalar_t__ lambda_den;
            (void) lambda_den;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_den, DUMMY_VAR__);
            stan::math::fill(lambda_den,DUMMY_VAR__);
            current_statement_begin__ = 289;
            local_scalar_t__ alpha_1;
            (void) alpha_1;  // dummy to suppress unused var warning

            stan::math::initialize(alpha_1, DUMMY_VAR__);
            stan::math::fill(alpha_1,DUMMY_VAR__);
            stan::math::assign(alpha_1,get_base1(alpha,1,"alpha",1));
            current_statement_begin__ = 290;
            validate_non_negative_index("g_psi", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  g_psi(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) g_psi;  // dummy to suppress unused var warning

            stan::math::initialize(g_psi, DUMMY_VAR__);
            stan::math::fill(g_psi,DUMMY_VAR__);
            stan::math::assign(g_psi,elt_multiply(elt_multiply(g,mu),col(parm_matrix,2)));
            current_statement_begin__ = 291;
            validate_non_negative_index("b", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) b;  // dummy to suppress unused var warning

            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b,DUMMY_VAR__);
            current_statement_begin__ = 292;
            validate_non_negative_index("c", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  c(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) c;  // dummy to suppress unused var warning

            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c,DUMMY_VAR__);


            current_statement_begin__ = 294;
            for (int j = 1; j <= (ngoods + 1); ++j) {
                current_statement_begin__ = 295;
                stan::model::assign(b, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            pow(get_base1(mu,j,"mu",1),(-(alpha_1) / (alpha_1 - 1))), 
                            "assigning variable b");
            }
            current_statement_begin__ = 297;
            stan::math::assign(c, elt_multiply(g_psi,b));
            current_statement_begin__ = 299;
            while (as_bool(logical_eq(exit,0))) {

                current_statement_begin__ = 301;
                stan::math::assign(lambda_num, (((alpha_1 * util) + sum(stan::model::rvalue(g_psi, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "g_psi"))) - get_base1(g_psi,1,"g_psi",1)));
                current_statement_begin__ = 302;
                stan::math::assign(lambda_den, sum(stan::model::rvalue(c, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "c")));
                current_statement_begin__ = 303;
                stan::math::assign(lambda1, pow((lambda_num / lambda_den),((alpha_1 - 1) / alpha_1)));
                current_statement_begin__ = 308;
                if (as_bool((primitive_value(logical_gt(lambda1,get_base1(mu,std::min((M + 1),(ngoods + 1)),"mu",1))) || primitive_value(logical_eq(M,(ngoods + 1)))))) {

                    current_statement_begin__ = 311;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 312;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    ((pow((lambda1 / get_base1(mu,m,"mu",1)),inv((alpha_1 - 1))) - get_base1(d,m,"d",1)) * get_base1(g,m,"g",1)), 
                                    "assigning variable X");
                    }
                    current_statement_begin__ = 313;
                    stan::math::assign(exit, 1);
                } else if (as_bool(logical_lt(M,(ngoods + 1)))) {
                    current_statement_begin__ = 316;
                    stan::math::assign(M, (M + 1));
                }
            }
            }
        } else if (as_bool(logical_eq(algo_gen,1))) {
            {
            current_statement_begin__ = 319;
            local_scalar_t__ lambda_l;
            (void) lambda_l;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_l, DUMMY_VAR__);
            stan::math::fill(lambda_l,DUMMY_VAR__);
            current_statement_begin__ = 320;
            local_scalar_t__ lambda_u;
            (void) lambda_u;  // dummy to suppress unused var warning

            stan::math::initialize(lambda_u, DUMMY_VAR__);
            stan::math::fill(lambda_u,DUMMY_VAR__);
            current_statement_begin__ = 321;
            validate_non_negative_index("price_ord", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  price_ord(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) price_ord;  // dummy to suppress unused var warning

            stan::math::initialize(price_ord, DUMMY_VAR__);
            stan::math::fill(price_ord,DUMMY_VAR__);
            stan::math::assign(price_ord,col(parm_matrix,2));
            current_statement_begin__ = 322;
            validate_non_negative_index("a", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) a;  // dummy to suppress unused var warning

            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a,DUMMY_VAR__);
            stan::math::assign(a,col(parm_matrix,4));
            current_statement_begin__ = 323;
            validate_non_negative_index("psi", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) psi;  // dummy to suppress unused var warning

            stan::math::initialize(psi, DUMMY_VAR__);
            stan::math::fill(psi,DUMMY_VAR__);
            stan::math::assign(psi,elt_multiply(mu,price_ord));
            current_statement_begin__ = 324;
            validate_non_negative_index("g_psi_a", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  g_psi_a(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) g_psi_a;  // dummy to suppress unused var warning

            stan::math::initialize(g_psi_a, DUMMY_VAR__);
            stan::math::fill(g_psi_a,DUMMY_VAR__);
            stan::math::assign(g_psi_a,elt_divide(elt_multiply(g,psi),a));
            current_statement_begin__ = 325;
            validate_non_negative_index("a_a_1", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a_a_1(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) a_a_1;  // dummy to suppress unused var warning

            stan::math::initialize(a_a_1, DUMMY_VAR__);
            stan::math::fill(a_a_1,DUMMY_VAR__);
            stan::math::assign(a_a_1,elt_divide(a,subtract(a,1)));
            current_statement_begin__ = 326;
            validate_non_negative_index("mu_a_a_1", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu_a_a_1(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) mu_a_a_1;  // dummy to suppress unused var warning

            stan::math::initialize(mu_a_a_1, DUMMY_VAR__);
            stan::math::fill(mu_a_a_1,DUMMY_VAR__);


            current_statement_begin__ = 328;
            for (int j = 1; j <= (ngoods + 1); ++j) {
                current_statement_begin__ = 329;
                stan::model::assign(mu_a_a_1, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            pow(inv(get_base1(mu,j,"mu",1)),get_base1(a_a_1,j,"a_a_1",1)), 
                            "assigning variable mu_a_a_1");
            }
            current_statement_begin__ = 331;
            while (as_bool(logical_eq(exit,0))) {

                current_statement_begin__ = 332;
                stan::math::assign(lambda1, get_base1(mu,(M + 1),"mu",1));
                current_statement_begin__ = 335;
                stan::math::assign(util_new, ComputeUtilM(M,lambda1,g_psi_a,a_a_1,mu_a_a_1,psi,g,price_ord,d,model_num, pstream__));
                current_statement_begin__ = 337;
                if (as_bool((primitive_value(logical_gte(util_new,util)) || primitive_value(logical_eq((M + 1),(ngoods + 1)))))) {

                    current_statement_begin__ = 338;
                    if (as_bool(logical_lt(util_new,util))) {
                        current_statement_begin__ = 339;
                        stan::math::assign(M, (M + 1));
                    }
                    current_statement_begin__ = 340;
                    stan::math::assign(lambda_l, (logical_lt(util_new,util) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(lambda1) ));
                    current_statement_begin__ = 341;
                    stan::math::assign(lambda_u, get_base1(mu,M,"mu",1));
                    current_statement_begin__ = 342;
                    stan::math::assign(lambda1, ((lambda_l + lambda_u) / 2));
                    current_statement_begin__ = 344;
                    for (int n = 1; n <= max_loop; ++n) {
                        {
                        current_statement_begin__ = 345;
                        local_scalar_t__ lambda_mid;
                        (void) lambda_mid;  // dummy to suppress unused var warning

                        stan::math::initialize(lambda_mid, DUMMY_VAR__);
                        stan::math::fill(lambda_mid,DUMMY_VAR__);
                        stan::math::assign(lambda_mid,((lambda_l + lambda_u) / 2));


                        current_statement_begin__ = 347;
                        stan::math::assign(util_new, ComputeUtilM(M,lambda1,g_psi_a,a_a_1,mu_a_a_1,psi,g,price_ord,d,model_num, pstream__));
                        current_statement_begin__ = 350;
                        if (as_bool(logical_lt(util_new,util))) {
                            current_statement_begin__ = 351;
                            stan::math::assign(lambda_u, lambda_mid);
                        } else if (as_bool(logical_gt(util_new,util))) {
                            current_statement_begin__ = 353;
                            stan::math::assign(lambda_l, lambda_mid);
                        }
                        current_statement_begin__ = 355;
                        stan::math::assign(lambda1, ((lambda_l + lambda_u) / 2));
                        current_statement_begin__ = 357;
                        if (as_bool(logical_lt(stan::math::fabs((((lambda_l - lambda_u) / (lambda_l + lambda_u)) * 0.5)),tol_l))) {
                            current_statement_begin__ = 357;
                            break;
                        }
                        }
                    }
                    current_statement_begin__ = 361;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 362;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    ((pow((lambda1 / get_base1(mu,m,"mu",1)),inv((get_base1(a,m,"a",1) - 1))) - get_base1(d,m,"d",1)) * get_base1(g,m,"g",1)), 
                                    "assigning variable X");
                    }
                    current_statement_begin__ = 363;
                    stan::math::assign(exit, 1);
                } else if (as_bool((primitive_value(logical_lt(util_new,util)) && primitive_value(logical_lt((M + 1),(ngoods + 1)))))) {
                    current_statement_begin__ = 366;
                    stan::math::assign(M, (M + 1));
                }
            }
            }
        }
        current_statement_begin__ = 370;
        stan::math::assign(hdemand, stan::model::rvalue(X, stan::model::cons_list(stan::model::index_multi(order_x), stan::model::nil_index_list()), "X"));
        current_statement_begin__ = 371;
        return stan::math::promote_scalar<fun_return_scalar_t__>(hdemand);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct HicksianDemand_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T8__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T8__>::type>::type, Eigen::Dynamic,1>
    operator()(const T0__& util,
                   const Eigen::Matrix<T1__, Eigen::Dynamic,1>& price,
                   const Eigen::Matrix<T2__, Eigen::Dynamic,1>& MUzero,
                   const Eigen::Matrix<T3__, Eigen::Dynamic,1>& gamma,
                   const Eigen::Matrix<T4__, Eigen::Dynamic,1>& alpha,
                   const int& ngoods,
                   const int& algo_gen,
                   const int& model_num,
                   const T8__& tol_l,
                   const int& max_loop, std::ostream* pstream__) const {
        return HicksianDemand(util, price, MUzero, gamma, alpha, ngoods, algo_gen, model_num, tol_l, max_loop, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T8__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T8__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
CalcmdemandOne_rng(const T0__& income,
                       const Eigen::Matrix<T1__, Eigen::Dynamic,1>& price,
                       const Eigen::Matrix<T2__, Eigen::Dynamic,1>& psi_sims,
                       const Eigen::Matrix<T3__, Eigen::Dynamic,1>& gamma_sims,
                       const Eigen::Matrix<T4__, Eigen::Dynamic,1>& alpha_sims,
                       const T5__& scale_sims,
                       const int& nerrs,
                       const int& algo_gen,
                       const T8__& tol,
                       const int& max_loop, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 379;
        int ngoods(0);
        (void) ngoods;  // dummy to suppress unused var warning

        stan::math::fill(ngoods, std::numeric_limits<int>::min());
        stan::math::assign(ngoods,num_elements(gamma_sims));
        current_statement_begin__ = 380;
        int nsims(0);
        (void) nsims;  // dummy to suppress unused var warning

        stan::math::fill(nsims, std::numeric_limits<int>::min());
        stan::math::assign(nsims,1);
        current_statement_begin__ = 381;
        validate_non_negative_index("mdemand_out", "nsims", nsims);
        validate_non_negative_index("mdemand_out", "(ngoods + 1)", (ngoods + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  mdemand_out(static_cast<Eigen::VectorXd::Index>(nsims),static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
        (void) mdemand_out;  // dummy to suppress unused var warning

        stan::math::initialize(mdemand_out, DUMMY_VAR__);
        stan::math::fill(mdemand_out,DUMMY_VAR__);


        current_statement_begin__ = 383;
        for (int sim = 1; sim <= nsims; ++sim) {
            {
            current_statement_begin__ = 384;
            validate_non_negative_index("psi_j", "ngoods", ngoods);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi_j(static_cast<Eigen::VectorXd::Index>(ngoods));
            (void) psi_j;  // dummy to suppress unused var warning

            stan::math::initialize(psi_j, DUMMY_VAR__);
            stan::math::fill(psi_j,DUMMY_VAR__);
            stan::math::assign(psi_j,psi_sims);
            current_statement_begin__ = 385;
            validate_non_negative_index("gamma", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  gamma(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) gamma;  // dummy to suppress unused var warning

            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma,DUMMY_VAR__);
            stan::math::assign(gamma,append_row(1,gamma_sims));
            current_statement_begin__ = 386;
            validate_non_negative_index("alpha", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            stan::math::assign(alpha,alpha_sims);
            current_statement_begin__ = 387;
            local_scalar_t__ scale;
            (void) scale;  // dummy to suppress unused var warning

            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale,DUMMY_VAR__);
            stan::math::assign(scale,scale_sims);
            current_statement_begin__ = 388;
            validate_non_negative_index("error", "(ngoods + 1)", (ngoods + 1));
            validate_non_negative_index("error", "nerrs", nerrs);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > error(nerrs, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((ngoods + 1)))));
            stan::math::initialize(error, DUMMY_VAR__);
            stan::math::fill(error,DUMMY_VAR__);
            current_statement_begin__ = 389;
            validate_non_negative_index("mdemand", "nerrs", nerrs);
            validate_non_negative_index("mdemand", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  mdemand(static_cast<Eigen::VectorXd::Index>(nerrs),static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) mdemand;  // dummy to suppress unused var warning

            stan::math::initialize(mdemand, DUMMY_VAR__);
            stan::math::fill(mdemand,DUMMY_VAR__);
            current_statement_begin__ = 390;
            validate_non_negative_index("mdemand_sims", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  mdemand_sims(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) mdemand_sims;  // dummy to suppress unused var warning

            stan::math::initialize(mdemand_sims, DUMMY_VAR__);
            stan::math::fill(mdemand_sims,DUMMY_VAR__);
            current_statement_begin__ = 391;
            validate_non_negative_index("mdemand_trans", "(ngoods + 1)", (ngoods + 1));
            validate_non_negative_index("mdemand_trans", "nerrs", nerrs);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  mdemand_trans(static_cast<Eigen::VectorXd::Index>((ngoods + 1)),static_cast<Eigen::VectorXd::Index>(nerrs));
            (void) mdemand_trans;  // dummy to suppress unused var warning

            stan::math::initialize(mdemand_trans, DUMMY_VAR__);
            stan::math::fill(mdemand_trans,DUMMY_VAR__);


            current_statement_begin__ = 393;
            for (int err = 1; err <= nerrs; ++err) {
                current_statement_begin__ = 394;
                for (int j = 1; j <= (ngoods + 1); ++j) {
                    current_statement_begin__ = 395;
                    stan::model::assign(error, 
                                stan::model::cons_list(stan::model::index_uni(err), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (-(stan::math::log(-(stan::math::log(uniform_rng(0,1, base_rng__))))) * scale), 
                                "assigning variable error");
                }
            }
            current_statement_begin__ = 398;
            for (int err = 1; err <= nerrs; ++err) {
                {
                current_statement_begin__ = 399;
                validate_non_negative_index("MUzero_b", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  MUzero_b(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) MUzero_b;  // dummy to suppress unused var warning

                stan::math::initialize(MUzero_b, DUMMY_VAR__);
                stan::math::fill(MUzero_b,DUMMY_VAR__);
                current_statement_begin__ = 400;
                validate_non_negative_index("psi_b_err", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi_b_err(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) psi_b_err;  // dummy to suppress unused var warning

                stan::math::initialize(psi_b_err, DUMMY_VAR__);
                stan::math::fill(psi_b_err,DUMMY_VAR__);


                current_statement_begin__ = 401;
                stan::math::assign(psi_b_err, stan::math::exp(add(append_row(0,psi_j),get_base1(error,err,"error",1))));
                current_statement_begin__ = 402;
                stan::math::assign(MUzero_b, elt_divide(psi_b_err,price));
                current_statement_begin__ = 404;
                stan::model::assign(mdemand, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                            transpose(MarshallianDemand(income,price,MUzero_b,gamma,alpha,ngoods,algo_gen,tol,max_loop, pstream__)), 
                            "assigning variable mdemand");
                }
            }
            current_statement_begin__ = 407;
            stan::math::assign(mdemand_trans, transpose(mdemand));
            current_statement_begin__ = 409;
            for (int g = 1; g <= (ngoods + 1); ++g) {
                current_statement_begin__ = 410;
                stan::model::assign(mdemand_sims, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            mean(get_base1(mdemand_trans,g,"mdemand_trans",1)), 
                            "assigning variable mdemand_sims");
            }
            current_statement_begin__ = 412;
            stan::model::assign(mdemand_out, 
                        stan::model::cons_list(stan::model::index_uni(sim), stan::model::nil_index_list()), 
                        mdemand_sims, 
                        "assigning variable mdemand_out");
            }
        }
        current_statement_begin__ = 415;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mdemand_out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CalcmdemandOne_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T8__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T8__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const T0__& income,
                       const Eigen::Matrix<T1__, Eigen::Dynamic,1>& price,
                       const Eigen::Matrix<T2__, Eigen::Dynamic,1>& psi_sims,
                       const Eigen::Matrix<T3__, Eigen::Dynamic,1>& gamma_sims,
                       const Eigen::Matrix<T4__, Eigen::Dynamic,1>& alpha_sims,
                       const T5__& scale_sims,
                       const int& nerrs,
                       const int& algo_gen,
                       const T8__& tol,
                       const int& max_loop, RNG& base_rng__, std::ostream* pstream__) const {
        return CalcmdemandOne_rng(income, price, psi_sims, gamma_sims, alpha_sims, scale_sims, nerrs, algo_gen, tol, max_loop, base_rng__, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T14__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T14__>::type>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
CalcWTP_rng(const T0__& income,
                const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price,
                const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic,1> >& price_p_policy,
                const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic> >& psi_p_sims,
                const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& psi_sims,
                const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic,1> >& gamma_sims,
                const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& alpha_sims,
                const Eigen::Matrix<T8__, Eigen::Dynamic,1>& scale_sims,
                const int& nerrs,
                const int& cond_error,
                const int& draw_mlhs,
                const int& algo_gen,
                const int& model_num,
                const T14__& tol,
                const int& max_loop, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T14__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 438;
        int ngoods(0);
        (void) ngoods;  // dummy to suppress unused var warning

        stan::math::fill(ngoods, std::numeric_limits<int>::min());
        stan::math::assign(ngoods,num_elements(quant_j));
        current_statement_begin__ = 439;
        int nsims(0);
        (void) nsims;  // dummy to suppress unused var warning

        stan::math::fill(nsims, std::numeric_limits<int>::min());
        stan::math::assign(nsims,num_elements(scale_sims));
        current_statement_begin__ = 440;
        int npols(0);
        (void) npols;  // dummy to suppress unused var warning

        stan::math::fill(npols, std::numeric_limits<int>::min());
        stan::math::assign(npols,size(price_p_policy));
        current_statement_begin__ = 441;
        validate_non_negative_index("wtp", "nsims", nsims);
        validate_non_negative_index("wtp", "npols", npols);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  wtp(static_cast<Eigen::VectorXd::Index>(nsims),static_cast<Eigen::VectorXd::Index>(npols));
        (void) wtp;  // dummy to suppress unused var warning

        stan::math::initialize(wtp, DUMMY_VAR__);
        stan::math::fill(wtp,DUMMY_VAR__);
        current_statement_begin__ = 442;
        local_scalar_t__ quant_num;
        (void) quant_num;  // dummy to suppress unused var warning

        stan::math::initialize(quant_num, DUMMY_VAR__);
        stan::math::fill(quant_num,DUMMY_VAR__);
        stan::math::assign(quant_num,(income - multiply(transpose(quant_j),stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"))));


        current_statement_begin__ = 444;
        for (int sim = 1; sim <= nsims; ++sim) {
            {
            current_statement_begin__ = 445;
            validate_non_negative_index("psi_j", "ngoods", ngoods);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi_j(static_cast<Eigen::VectorXd::Index>(ngoods));
            (void) psi_j;  // dummy to suppress unused var warning

            stan::math::initialize(psi_j, DUMMY_VAR__);
            stan::math::fill(psi_j,DUMMY_VAR__);
            stan::math::assign(psi_j,transpose(get_base1(psi_sims,sim,"psi_sims",1)));
            current_statement_begin__ = 446;
            validate_non_negative_index("psi_p_policy", "npols", npols);
            validate_non_negative_index("psi_p_policy", "ngoods", ngoods);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  psi_p_policy(static_cast<Eigen::VectorXd::Index>(npols),static_cast<Eigen::VectorXd::Index>(ngoods));
            (void) psi_p_policy;  // dummy to suppress unused var warning

            stan::math::initialize(psi_p_policy, DUMMY_VAR__);
            stan::math::fill(psi_p_policy,DUMMY_VAR__);
            stan::math::assign(psi_p_policy,get_base1(psi_p_sims,sim,"psi_p_sims",1));
            current_statement_begin__ = 448;
            validate_non_negative_index("gamma", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  gamma(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) gamma;  // dummy to suppress unused var warning

            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma,DUMMY_VAR__);
            stan::math::assign(gamma,append_row(1,get_base1(gamma_sims,sim,"gamma_sims",1)));
            current_statement_begin__ = 449;
            validate_non_negative_index("alpha", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            stan::math::assign(alpha,get_base1(alpha_sims,sim,"alpha_sims",1));
            current_statement_begin__ = 450;
            local_scalar_t__ scale;
            (void) scale;  // dummy to suppress unused var warning

            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale,DUMMY_VAR__);
            stan::math::assign(scale,get_base1(scale_sims,sim,"scale_sims",1));
            current_statement_begin__ = 451;
            validate_non_negative_index("error", "(ngoods + 1)", (ngoods + 1));
            validate_non_negative_index("error", "nerrs", nerrs);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > error(nerrs, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((ngoods + 1)))));
            stan::math::initialize(error, DUMMY_VAR__);
            stan::math::fill(error,DUMMY_VAR__);
            current_statement_begin__ = 452;
            validate_non_negative_index("wtp_policy", "npols", npols);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  wtp_policy(static_cast<Eigen::VectorXd::Index>(npols));
            (void) wtp_policy;  // dummy to suppress unused var warning

            stan::math::initialize(wtp_policy, DUMMY_VAR__);
            stan::math::fill(wtp_policy,DUMMY_VAR__);
            current_statement_begin__ = 453;
            validate_non_negative_index("util", "nerrs", nerrs);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  util(static_cast<Eigen::VectorXd::Index>(nerrs));
            (void) util;  // dummy to suppress unused var warning

            stan::math::initialize(util, DUMMY_VAR__);
            stan::math::fill(util,DUMMY_VAR__);


            current_statement_begin__ = 455;
            stan::math::assign(error, DrawError_rng(quant_num,quant_j,stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"),psi_j,stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "gamma"),alpha,scale,ngoods,nerrs,cond_error,draw_mlhs, base_rng__, pstream__));
            current_statement_begin__ = 460;
            for (int err = 1; err <= nerrs; ++err) {
                {
                current_statement_begin__ = 461;
                validate_non_negative_index("mdemand", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mdemand(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) mdemand;  // dummy to suppress unused var warning

                stan::math::initialize(mdemand, DUMMY_VAR__);
                stan::math::fill(mdemand,DUMMY_VAR__);
                current_statement_begin__ = 462;
                validate_non_negative_index("MUzero_b", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  MUzero_b(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) MUzero_b;  // dummy to suppress unused var warning

                stan::math::initialize(MUzero_b, DUMMY_VAR__);
                stan::math::fill(MUzero_b,DUMMY_VAR__);
                current_statement_begin__ = 465;
                validate_non_negative_index("psi_b_err", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi_b_err(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) psi_b_err;  // dummy to suppress unused var warning

                stan::math::initialize(psi_b_err, DUMMY_VAR__);
                stan::math::fill(psi_b_err,DUMMY_VAR__);


                current_statement_begin__ = 466;
                stan::math::assign(psi_b_err, stan::math::exp(add(append_row(0,psi_j),get_base1(error,err,"error",1))));
                current_statement_begin__ = 467;
                stan::math::assign(MUzero_b, elt_divide(psi_b_err,price));
                current_statement_begin__ = 469;
                if (as_bool(logical_eq(cond_error,1))) {

                    current_statement_begin__ = 470;
                    stan::math::assign(mdemand, append_row(quant_num,quant_j));
                } else if (as_bool(logical_eq(cond_error,0))) {
                    current_statement_begin__ = 472;
                    stan::math::assign(mdemand, MarshallianDemand(income,price,MUzero_b,gamma,alpha,ngoods,algo_gen,tol,max_loop, pstream__));
                }
                current_statement_begin__ = 475;
                stan::model::assign(util, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                            ComputeUtilJ(income,stan::model::rvalue(mdemand, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "mdemand"),stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"),stan::model::rvalue(psi_b_err, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "psi_b_err"),stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "gamma"),alpha,ngoods,model_num, pstream__), 
                            "assigning variable util");
                }
            }
            current_statement_begin__ = 480;
            for (int policy = 1; policy <= npols; ++policy) {
                {
                current_statement_begin__ = 481;
                validate_non_negative_index("price_p", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  price_p(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) price_p;  // dummy to suppress unused var warning

                stan::math::initialize(price_p, DUMMY_VAR__);
                stan::math::fill(price_p,DUMMY_VAR__);
                stan::math::assign(price_p,add(price,get_base1(price_p_policy,policy,"price_p_policy",1)));
                current_statement_begin__ = 482;
                validate_non_negative_index("psi_p", "ngoods", ngoods);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi_p(static_cast<Eigen::VectorXd::Index>(ngoods));
                (void) psi_p;  // dummy to suppress unused var warning

                stan::math::initialize(psi_p, DUMMY_VAR__);
                stan::math::fill(psi_p,DUMMY_VAR__);
                stan::math::assign(psi_p,transpose(get_base1(psi_p_policy,policy,"psi_p_policy",1)));
                current_statement_begin__ = 483;
                validate_non_negative_index("wtp_err", "nerrs", nerrs);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  wtp_err(static_cast<Eigen::VectorXd::Index>(nerrs));
                (void) wtp_err;  // dummy to suppress unused var warning

                stan::math::initialize(wtp_err, DUMMY_VAR__);
                stan::math::fill(wtp_err,DUMMY_VAR__);


                current_statement_begin__ = 485;
                for (int err = 1; err <= nerrs; ++err) {
                    {
                    current_statement_begin__ = 487;
                    validate_non_negative_index("MUzero_p", "(ngoods + 1)", (ngoods + 1));
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  MUzero_p(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                    (void) MUzero_p;  // dummy to suppress unused var warning

                    stan::math::initialize(MUzero_p, DUMMY_VAR__);
                    stan::math::fill(MUzero_p,DUMMY_VAR__);
                    stan::math::assign(MUzero_p,elt_divide(stan::math::exp(add(append_row(0,psi_p),get_base1(error,err,"error",1))),price_p));
                    current_statement_begin__ = 488;
                    validate_non_negative_index("hdemand", "(ngoods + 1)", (ngoods + 1));
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hdemand(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                    (void) hdemand;  // dummy to suppress unused var warning

                    stan::math::initialize(hdemand, DUMMY_VAR__);
                    stan::math::fill(hdemand,DUMMY_VAR__);


                    current_statement_begin__ = 490;
                    stan::math::assign(hdemand, HicksianDemand(get_base1(util,err,"util",1),price_p,MUzero_p,gamma,alpha,ngoods,algo_gen,model_num,tol,max_loop, pstream__));
                    current_statement_begin__ = 493;
                    stan::model::assign(wtp_err, 
                                stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                                (income - multiply(transpose(price_p),hdemand)), 
                                "assigning variable wtp_err");
                    }
                }
                current_statement_begin__ = 495;
                stan::model::assign(wtp_policy, 
                            stan::model::cons_list(stan::model::index_uni(policy), stan::model::nil_index_list()), 
                            mean(wtp_err), 
                            "assigning variable wtp_policy");
                }
            }
            current_statement_begin__ = 497;
            stan::model::assign(wtp, 
                        stan::model::cons_list(stan::model::index_uni(sim), stan::model::nil_index_list()), 
                        transpose(wtp_policy), 
                        "assigning variable wtp");
            }
        }
        current_statement_begin__ = 499;
        return stan::math::promote_scalar<fun_return_scalar_t__>(wtp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CalcWTP_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T14__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T14__>::type>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const T0__& income,
                const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price,
                const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic,1> >& price_p_policy,
                const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic> >& psi_p_sims,
                const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& psi_sims,
                const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic,1> >& gamma_sims,
                const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& alpha_sims,
                const Eigen::Matrix<T8__, Eigen::Dynamic,1>& scale_sims,
                const int& nerrs,
                const int& cond_error,
                const int& draw_mlhs,
                const int& algo_gen,
                const int& model_num,
                const T14__& tol,
                const int& max_loop, RNG& base_rng__, std::ostream* pstream__) const {
        return CalcWTP_rng(income, quant_j, price, price_p_policy, psi_p_sims, psi_sims, gamma_sims, alpha_sims, scale_sims, nerrs, cond_error, draw_mlhs, algo_gen, model_num, tol, max_loop, base_rng__, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T13__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T13__>::type>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
CalcWTPPriceOnly_rng(const T0__& income,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                         const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price,
                         const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic,1> >& price_p_policy,
                         const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& psi_sims,
                         const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic,1> >& gamma_sims,
                         const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic,1> >& alpha_sims,
                         const Eigen::Matrix<T7__, Eigen::Dynamic,1>& scale_sims,
                         const int& nerrs,
                         const int& cond_error,
                         const int& draw_mlhs,
                         const int& algo_gen,
                         const int& model_num,
                         const T13__& tol,
                         const int& max_loop, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T13__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 520;
        int ngoods(0);
        (void) ngoods;  // dummy to suppress unused var warning

        stan::math::fill(ngoods, std::numeric_limits<int>::min());
        stan::math::assign(ngoods,num_elements(quant_j));
        current_statement_begin__ = 521;
        int nsims(0);
        (void) nsims;  // dummy to suppress unused var warning

        stan::math::fill(nsims, std::numeric_limits<int>::min());
        stan::math::assign(nsims,num_elements(scale_sims));
        current_statement_begin__ = 522;
        int npols(0);
        (void) npols;  // dummy to suppress unused var warning

        stan::math::fill(npols, std::numeric_limits<int>::min());
        stan::math::assign(npols,size(price_p_policy));
        current_statement_begin__ = 523;
        validate_non_negative_index("wtp", "nsims", nsims);
        validate_non_negative_index("wtp", "npols", npols);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  wtp(static_cast<Eigen::VectorXd::Index>(nsims),static_cast<Eigen::VectorXd::Index>(npols));
        (void) wtp;  // dummy to suppress unused var warning

        stan::math::initialize(wtp, DUMMY_VAR__);
        stan::math::fill(wtp,DUMMY_VAR__);
        current_statement_begin__ = 524;
        local_scalar_t__ quant_num;
        (void) quant_num;  // dummy to suppress unused var warning

        stan::math::initialize(quant_num, DUMMY_VAR__);
        stan::math::fill(quant_num,DUMMY_VAR__);
        stan::math::assign(quant_num,(income - multiply(transpose(quant_j),stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"))));


        current_statement_begin__ = 526;
        for (int sim = 1; sim <= nsims; ++sim) {
            {
            current_statement_begin__ = 527;
            validate_non_negative_index("psi_j", "ngoods", ngoods);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi_j(static_cast<Eigen::VectorXd::Index>(ngoods));
            (void) psi_j;  // dummy to suppress unused var warning

            stan::math::initialize(psi_j, DUMMY_VAR__);
            stan::math::fill(psi_j,DUMMY_VAR__);
            stan::math::assign(psi_j,transpose(get_base1(psi_sims,sim,"psi_sims",1)));
            current_statement_begin__ = 528;
            validate_non_negative_index("psi_b_err", "(ngoods + 1)", (ngoods + 1));
            validate_non_negative_index("psi_b_err", "nerrs", nerrs);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > psi_b_err(nerrs, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((ngoods + 1)))));
            stan::math::initialize(psi_b_err, DUMMY_VAR__);
            stan::math::fill(psi_b_err,DUMMY_VAR__);
            current_statement_begin__ = 529;
            validate_non_negative_index("gamma", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  gamma(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) gamma;  // dummy to suppress unused var warning

            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma,DUMMY_VAR__);
            stan::math::assign(gamma,append_row(1,get_base1(gamma_sims,sim,"gamma_sims",1)));
            current_statement_begin__ = 530;
            validate_non_negative_index("alpha", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            stan::math::assign(alpha,get_base1(alpha_sims,sim,"alpha_sims",1));
            current_statement_begin__ = 531;
            local_scalar_t__ scale;
            (void) scale;  // dummy to suppress unused var warning

            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale,DUMMY_VAR__);
            stan::math::assign(scale,get_base1(scale_sims,sim,"scale_sims",1));
            current_statement_begin__ = 532;
            validate_non_negative_index("error", "(ngoods + 1)", (ngoods + 1));
            validate_non_negative_index("error", "nerrs", nerrs);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > error(nerrs, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((ngoods + 1)))));
            stan::math::initialize(error, DUMMY_VAR__);
            stan::math::fill(error,DUMMY_VAR__);
            current_statement_begin__ = 533;
            validate_non_negative_index("wtp_policy", "npols", npols);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  wtp_policy(static_cast<Eigen::VectorXd::Index>(npols));
            (void) wtp_policy;  // dummy to suppress unused var warning

            stan::math::initialize(wtp_policy, DUMMY_VAR__);
            stan::math::fill(wtp_policy,DUMMY_VAR__);
            current_statement_begin__ = 534;
            validate_non_negative_index("util", "nerrs", nerrs);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  util(static_cast<Eigen::VectorXd::Index>(nerrs));
            (void) util;  // dummy to suppress unused var warning

            stan::math::initialize(util, DUMMY_VAR__);
            stan::math::fill(util,DUMMY_VAR__);


            current_statement_begin__ = 536;
            stan::math::assign(error, DrawError_rng(quant_num,quant_j,stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"),psi_j,stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "gamma"),alpha,scale,ngoods,nerrs,cond_error,draw_mlhs, base_rng__, pstream__));
            current_statement_begin__ = 541;
            for (int err = 1; err <= nerrs; ++err) {
                {
                current_statement_begin__ = 542;
                validate_non_negative_index("mdemand", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mdemand(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) mdemand;  // dummy to suppress unused var warning

                stan::math::initialize(mdemand, DUMMY_VAR__);
                stan::math::fill(mdemand,DUMMY_VAR__);
                current_statement_begin__ = 543;
                validate_non_negative_index("MUzero_b", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  MUzero_b(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) MUzero_b;  // dummy to suppress unused var warning

                stan::math::initialize(MUzero_b, DUMMY_VAR__);
                stan::math::fill(MUzero_b,DUMMY_VAR__);


                current_statement_begin__ = 544;
                stan::model::assign(psi_b_err, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                            stan::math::exp(add(append_row(0,psi_j),get_base1(error,err,"error",1))), 
                            "assigning variable psi_b_err");
                current_statement_begin__ = 545;
                stan::math::assign(MUzero_b, elt_divide(get_base1(psi_b_err,err,"psi_b_err",1),price));
                current_statement_begin__ = 547;
                if (as_bool(logical_eq(cond_error,1))) {

                    current_statement_begin__ = 548;
                    stan::math::assign(mdemand, append_row(quant_num,quant_j));
                } else if (as_bool(logical_eq(cond_error,0))) {
                    current_statement_begin__ = 550;
                    stan::math::assign(mdemand, MarshallianDemand(income,price,MUzero_b,gamma,alpha,ngoods,algo_gen,tol,max_loop, pstream__));
                }
                current_statement_begin__ = 553;
                stan::model::assign(util, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                            ComputeUtilJ(income,stan::model::rvalue(mdemand, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "mdemand"),stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"),stan::model::rvalue(psi_b_err, stan::model::cons_list(stan::model::index_uni(err), stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list())), "psi_b_err"),stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "gamma"),alpha,ngoods,model_num, pstream__), 
                            "assigning variable util");
                }
            }
            current_statement_begin__ = 558;
            for (int policy = 1; policy <= npols; ++policy) {
                {
                current_statement_begin__ = 559;
                validate_non_negative_index("price_p", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  price_p(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) price_p;  // dummy to suppress unused var warning

                stan::math::initialize(price_p, DUMMY_VAR__);
                stan::math::fill(price_p,DUMMY_VAR__);
                stan::math::assign(price_p,add(price,get_base1(price_p_policy,policy,"price_p_policy",1)));
                current_statement_begin__ = 560;
                validate_non_negative_index("wtp_err", "nerrs", nerrs);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  wtp_err(static_cast<Eigen::VectorXd::Index>(nerrs));
                (void) wtp_err;  // dummy to suppress unused var warning

                stan::math::initialize(wtp_err, DUMMY_VAR__);
                stan::math::fill(wtp_err,DUMMY_VAR__);


                current_statement_begin__ = 562;
                for (int err = 1; err <= nerrs; ++err) {
                    {
                    current_statement_begin__ = 563;
                    validate_non_negative_index("MUzero_p", "(ngoods + 1)", (ngoods + 1));
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  MUzero_p(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                    (void) MUzero_p;  // dummy to suppress unused var warning

                    stan::math::initialize(MUzero_p, DUMMY_VAR__);
                    stan::math::fill(MUzero_p,DUMMY_VAR__);
                    stan::math::assign(MUzero_p,elt_divide(get_base1(psi_b_err,err,"psi_b_err",1),price_p));
                    current_statement_begin__ = 564;
                    validate_non_negative_index("hdemand", "(ngoods + 1)", (ngoods + 1));
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hdemand(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                    (void) hdemand;  // dummy to suppress unused var warning

                    stan::math::initialize(hdemand, DUMMY_VAR__);
                    stan::math::fill(hdemand,DUMMY_VAR__);


                    current_statement_begin__ = 566;
                    stan::math::assign(hdemand, HicksianDemand(get_base1(util,err,"util",1),price_p,MUzero_p,gamma,alpha,ngoods,algo_gen,model_num,tol,max_loop, pstream__));
                    current_statement_begin__ = 569;
                    stan::model::assign(wtp_err, 
                                stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                                (income - multiply(transpose(price_p),hdemand)), 
                                "assigning variable wtp_err");
                    }
                }
                current_statement_begin__ = 571;
                stan::model::assign(wtp_policy, 
                            stan::model::cons_list(stan::model::index_uni(policy), stan::model::nil_index_list()), 
                            mean(wtp_err), 
                            "assigning variable wtp_policy");
                }
            }
            current_statement_begin__ = 573;
            stan::model::assign(wtp, 
                        stan::model::cons_list(stan::model::index_uni(sim), stan::model::nil_index_list()), 
                        transpose(wtp_policy), 
                        "assigning variable wtp");
            }
        }
        current_statement_begin__ = 575;
        return stan::math::promote_scalar<fun_return_scalar_t__>(wtp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CalcWTPPriceOnly_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T13__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T13__>::type>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const T0__& income,
                         const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                         const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price,
                         const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic,1> >& price_p_policy,
                         const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& psi_sims,
                         const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic,1> >& gamma_sims,
                         const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic,1> >& alpha_sims,
                         const Eigen::Matrix<T7__, Eigen::Dynamic,1>& scale_sims,
                         const int& nerrs,
                         const int& cond_error,
                         const int& draw_mlhs,
                         const int& algo_gen,
                         const int& model_num,
                         const T13__& tol,
                         const int& max_loop, RNG& base_rng__, std::ostream* pstream__) const {
        return CalcWTPPriceOnly_rng(income, quant_j, price, price_p_policy, psi_sims, gamma_sims, alpha_sims, scale_sims, nerrs, cond_error, draw_mlhs, algo_gen, model_num, tol, max_loop, base_rng__, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T14__, class RNG>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T14__>::type>::type>::type, Eigen::Dynamic,Eigen::Dynamic> >
CalcMarshallianDemand_rng(const T0__& income,
                              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price,
                              const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic,1> >& price_p_policy,
                              const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic> >& psi_p_sims,
                              const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& psi_sims,
                              const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic,1> >& gamma_sims,
                              const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& alpha_sims,
                              const Eigen::Matrix<T8__, Eigen::Dynamic,1>& scale_sims,
                              const int& nerrs,
                              const int& cond_error,
                              const int& draw_mlhs,
                              const int& algo_gen,
                              const int& model_num,
                              const T14__& tol,
                              const int& max_loop, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T14__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 584;
        int ngoods(0);
        (void) ngoods;  // dummy to suppress unused var warning

        stan::math::fill(ngoods, std::numeric_limits<int>::min());
        stan::math::assign(ngoods,num_elements(quant_j));
        current_statement_begin__ = 585;
        int nsims(0);
        (void) nsims;  // dummy to suppress unused var warning

        stan::math::fill(nsims, std::numeric_limits<int>::min());
        stan::math::assign(nsims,num_elements(scale_sims));
        current_statement_begin__ = 586;
        int npols(0);
        (void) npols;  // dummy to suppress unused var warning

        stan::math::fill(npols, std::numeric_limits<int>::min());
        stan::math::assign(npols,size(price_p_policy));
        current_statement_begin__ = 587;
        validate_non_negative_index("mdemand_out", "npols", npols);
        validate_non_negative_index("mdemand_out", "(ngoods + 1)", (ngoods + 1));
        validate_non_negative_index("mdemand_out", "nsims", nsims);
        vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > mdemand_out(nsims, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(npols),static_cast<Eigen::VectorXd::Index>((ngoods + 1)))));
        stan::math::initialize(mdemand_out, DUMMY_VAR__);
        stan::math::fill(mdemand_out,DUMMY_VAR__);
        current_statement_begin__ = 588;
        local_scalar_t__ quant_num;
        (void) quant_num;  // dummy to suppress unused var warning

        stan::math::initialize(quant_num, DUMMY_VAR__);
        stan::math::fill(quant_num,DUMMY_VAR__);
        stan::math::assign(quant_num,(income - multiply(transpose(quant_j),stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"))));


        current_statement_begin__ = 590;
        for (int sim = 1; sim <= nsims; ++sim) {
            {
            current_statement_begin__ = 591;
            validate_non_negative_index("psi_j", "ngoods", ngoods);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi_j(static_cast<Eigen::VectorXd::Index>(ngoods));
            (void) psi_j;  // dummy to suppress unused var warning

            stan::math::initialize(psi_j, DUMMY_VAR__);
            stan::math::fill(psi_j,DUMMY_VAR__);
            stan::math::assign(psi_j,transpose(get_base1(psi_sims,sim,"psi_sims",1)));
            current_statement_begin__ = 592;
            validate_non_negative_index("psi_p_policy", "npols", npols);
            validate_non_negative_index("psi_p_policy", "ngoods", ngoods);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  psi_p_policy(static_cast<Eigen::VectorXd::Index>(npols),static_cast<Eigen::VectorXd::Index>(ngoods));
            (void) psi_p_policy;  // dummy to suppress unused var warning

            stan::math::initialize(psi_p_policy, DUMMY_VAR__);
            stan::math::fill(psi_p_policy,DUMMY_VAR__);
            stan::math::assign(psi_p_policy,get_base1(psi_p_sims,sim,"psi_p_sims",1));
            current_statement_begin__ = 594;
            validate_non_negative_index("gamma", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  gamma(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) gamma;  // dummy to suppress unused var warning

            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma,DUMMY_VAR__);
            stan::math::assign(gamma,append_row(1,get_base1(gamma_sims,sim,"gamma_sims",1)));
            current_statement_begin__ = 595;
            validate_non_negative_index("alpha", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  alpha(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            stan::math::assign(alpha,get_base1(alpha_sims,sim,"alpha_sims",1));
            current_statement_begin__ = 596;
            local_scalar_t__ scale;
            (void) scale;  // dummy to suppress unused var warning

            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale,DUMMY_VAR__);
            stan::math::assign(scale,get_base1(scale_sims,sim,"scale_sims",1));
            current_statement_begin__ = 597;
            validate_non_negative_index("error", "(ngoods + 1)", (ngoods + 1));
            validate_non_negative_index("error", "nerrs", nerrs);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > error(nerrs, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>((ngoods + 1)))));
            stan::math::initialize(error, DUMMY_VAR__);
            stan::math::fill(error,DUMMY_VAR__);
            current_statement_begin__ = 598;
            validate_non_negative_index("mdemand_pols", "npols", npols);
            validate_non_negative_index("mdemand_pols", "(ngoods + 1)", (ngoods + 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  mdemand_pols(static_cast<Eigen::VectorXd::Index>(npols),static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
            (void) mdemand_pols;  // dummy to suppress unused var warning

            stan::math::initialize(mdemand_pols, DUMMY_VAR__);
            stan::math::fill(mdemand_pols,DUMMY_VAR__);
            current_statement_begin__ = 599;
            validate_non_negative_index("util", "nerrs", nerrs);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  util(static_cast<Eigen::VectorXd::Index>(nerrs));
            (void) util;  // dummy to suppress unused var warning

            stan::math::initialize(util, DUMMY_VAR__);
            stan::math::fill(util,DUMMY_VAR__);


            current_statement_begin__ = 601;
            stan::math::assign(error, DrawError_rng(quant_num,quant_j,stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"),psi_j,stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "gamma"),alpha,scale,ngoods,nerrs,cond_error,draw_mlhs, base_rng__, pstream__));
            current_statement_begin__ = 606;
            for (int err = 1; err <= nerrs; ++err) {
                {
                current_statement_begin__ = 607;
                validate_non_negative_index("mdemand_util", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mdemand_util(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) mdemand_util;  // dummy to suppress unused var warning

                stan::math::initialize(mdemand_util, DUMMY_VAR__);
                stan::math::fill(mdemand_util,DUMMY_VAR__);
                current_statement_begin__ = 608;
                validate_non_negative_index("MUzero_b", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  MUzero_b(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) MUzero_b;  // dummy to suppress unused var warning

                stan::math::initialize(MUzero_b, DUMMY_VAR__);
                stan::math::fill(MUzero_b,DUMMY_VAR__);
                current_statement_begin__ = 611;
                validate_non_negative_index("psi_b_err", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi_b_err(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) psi_b_err;  // dummy to suppress unused var warning

                stan::math::initialize(psi_b_err, DUMMY_VAR__);
                stan::math::fill(psi_b_err,DUMMY_VAR__);


                current_statement_begin__ = 612;
                stan::math::assign(psi_b_err, stan::math::exp(add(append_row(0,psi_j),get_base1(error,err,"error",1))));
                current_statement_begin__ = 613;
                stan::math::assign(MUzero_b, elt_divide(psi_b_err,price));
                current_statement_begin__ = 615;
                if (as_bool(logical_eq(cond_error,1))) {

                    current_statement_begin__ = 616;
                    stan::math::assign(mdemand_util, append_row(quant_num,quant_j));
                } else if (as_bool(logical_eq(cond_error,0))) {
                    current_statement_begin__ = 618;
                    stan::math::assign(mdemand_util, MarshallianDemand(income,price,MUzero_b,gamma,alpha,ngoods,algo_gen,tol,max_loop, pstream__));
                }
                current_statement_begin__ = 621;
                stan::model::assign(util, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                            ComputeUtilJ(income,stan::model::rvalue(mdemand_util, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "mdemand_util"),stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "price"),stan::model::rvalue(psi_b_err, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "psi_b_err"),stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (ngoods + 1)), stan::model::nil_index_list()), "gamma"),alpha,ngoods,model_num, pstream__), 
                            "assigning variable util");
                }
            }
            current_statement_begin__ = 626;
            for (int policy = 1; policy <= npols; ++policy) {
                {
                current_statement_begin__ = 627;
                validate_non_negative_index("price_p", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  price_p(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) price_p;  // dummy to suppress unused var warning

                stan::math::initialize(price_p, DUMMY_VAR__);
                stan::math::fill(price_p,DUMMY_VAR__);
                stan::math::assign(price_p,add(price,get_base1(price_p_policy,policy,"price_p_policy",1)));
                current_statement_begin__ = 628;
                validate_non_negative_index("psi_p", "ngoods", ngoods);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  psi_p(static_cast<Eigen::VectorXd::Index>(ngoods));
                (void) psi_p;  // dummy to suppress unused var warning

                stan::math::initialize(psi_p, DUMMY_VAR__);
                stan::math::fill(psi_p,DUMMY_VAR__);
                stan::math::assign(psi_p,transpose(get_base1(psi_p_policy,policy,"psi_p_policy",1)));
                current_statement_begin__ = 629;
                validate_non_negative_index("mdemand_g", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  mdemand_g(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) mdemand_g;  // dummy to suppress unused var warning

                stan::math::initialize(mdemand_g, DUMMY_VAR__);
                stan::math::fill(mdemand_g,DUMMY_VAR__);
                current_statement_begin__ = 630;
                validate_non_negative_index("mdemand_p", "nerrs", nerrs);
                validate_non_negative_index("mdemand_p", "(ngoods + 1)", (ngoods + 1));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  mdemand_p(static_cast<Eigen::VectorXd::Index>(nerrs),static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                (void) mdemand_p;  // dummy to suppress unused var warning

                stan::math::initialize(mdemand_p, DUMMY_VAR__);
                stan::math::fill(mdemand_p,DUMMY_VAR__);
                current_statement_begin__ = 631;
                validate_non_negative_index("mdemand_trans", "(ngoods + 1)", (ngoods + 1));
                validate_non_negative_index("mdemand_trans", "nerrs", nerrs);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  mdemand_trans(static_cast<Eigen::VectorXd::Index>((ngoods + 1)),static_cast<Eigen::VectorXd::Index>(nerrs));
                (void) mdemand_trans;  // dummy to suppress unused var warning

                stan::math::initialize(mdemand_trans, DUMMY_VAR__);
                stan::math::fill(mdemand_trans,DUMMY_VAR__);


                current_statement_begin__ = 633;
                for (int err = 1; err <= nerrs; ++err) {
                    {
                    current_statement_begin__ = 634;
                    validate_non_negative_index("MUzero_p", "(ngoods + 1)", (ngoods + 1));
                    Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  MUzero_p(static_cast<Eigen::VectorXd::Index>((ngoods + 1)));
                    (void) MUzero_p;  // dummy to suppress unused var warning

                    stan::math::initialize(MUzero_p, DUMMY_VAR__);
                    stan::math::fill(MUzero_p,DUMMY_VAR__);
                    stan::math::assign(MUzero_p,elt_divide(stan::math::exp(add(append_row(0,psi_p),get_base1(error,err,"error",1))),price_p));


                    current_statement_begin__ = 636;
                    stan::model::assign(mdemand_p, 
                                stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                                transpose(MarshallianDemand(income,price,MUzero_p,gamma,alpha,ngoods,algo_gen,tol,max_loop, pstream__)), 
                                "assigning variable mdemand_p");
                    }
                }
                current_statement_begin__ = 639;
                stan::math::assign(mdemand_trans, transpose(mdemand_p));
                current_statement_begin__ = 641;
                for (int g = 1; g <= (ngoods + 1); ++g) {
                    current_statement_begin__ = 642;
                    stan::model::assign(mdemand_g, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                                mean(get_base1(mdemand_trans,g,"mdemand_trans",1)), 
                                "assigning variable mdemand_g");
                }
                current_statement_begin__ = 644;
                stan::model::assign(mdemand_pols, 
                            stan::model::cons_list(stan::model::index_uni(policy), stan::model::nil_index_list()), 
                            mdemand_g, 
                            "assigning variable mdemand_pols");
                }
            }
            current_statement_begin__ = 646;
            stan::model::assign(mdemand_out, 
                        stan::model::cons_list(stan::model::index_uni(sim), stan::model::nil_index_list()), 
                        mdemand_pols, 
                        "assigning variable mdemand_out");
            }
        }
        current_statement_begin__ = 648;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mdemand_out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct CalcMarshallianDemand_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T14__, class RNG>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T14__>::type>::type>::type, Eigen::Dynamic,Eigen::Dynamic> >
    operator()(const T0__& income,
                              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& quant_j,
                              const Eigen::Matrix<T2__, Eigen::Dynamic,1>& price,
                              const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic,1> >& price_p_policy,
                              const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic> >& psi_p_sims,
                              const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& psi_sims,
                              const std::vector<Eigen::Matrix<T6__, Eigen::Dynamic,1> >& gamma_sims,
                              const std::vector<Eigen::Matrix<T7__, Eigen::Dynamic,1> >& alpha_sims,
                              const Eigen::Matrix<T8__, Eigen::Dynamic,1>& scale_sims,
                              const int& nerrs,
                              const int& cond_error,
                              const int& draw_mlhs,
                              const int& algo_gen,
                              const int& model_num,
                              const T14__& tol,
                              const int& max_loop, RNG& base_rng__, std::ostream* pstream__) const {
        return CalcMarshallianDemand_rng(income, quant_j, price, price_p_policy, psi_p_sims, psi_sims, gamma_sims, alpha_sims, scale_sims, nerrs, cond_error, draw_mlhs, algo_gen, model_num, tol, max_loop, base_rng__, pstream__);
    }
};

#include <meta_header.hpp>
 class model_SimulationFunctions : public prob_grad {
private:
public:
    model_SimulationFunctions(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_SimulationFunctions(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_SimulationFunctions_namespace::model_SimulationFunctions";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {

            // validate, data variables
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_SimulationFunctions() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_SimulationFunctions_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_SimulationFunctions";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_SimulationFunctions_namespace::model_SimulationFunctions stan_model;


#endif
