// Generated by rstantools.  Do not edit by hand.

/*
    rmdcev is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rmdcev is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rmdcev.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_mdcev_rp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mdcev_rp");
    reader.add_event(2, 2, "include", "/common/mdcev_ll.stan");
    reader.add_event(2, 0, "start", "/common/mdcev_ll.stan");
    reader.add_event(73, 71, "end", "/common/mdcev_ll.stan");
    reader.add_event(73, 3, "restart", "model_mdcev_rp");
    reader.add_event(77, 7, "include", "/common/mdcev_data.stan");
    reader.add_event(77, 0, "start", "/common/mdcev_data.stan");
    reader.add_event(94, 17, "end", "/common/mdcev_data.stan");
    reader.add_event(94, 8, "restart", "model_mdcev_rp");
    reader.add_event(109, 23, "include", "/common/mdcev_tdata.stan");
    reader.add_event(109, 0, "start", "/common/mdcev_tdata.stan");
    reader.add_event(139, 30, "end", "/common/mdcev_tdata.stan");
    reader.add_event(139, 24, "restart", "model_mdcev_rp");
    reader.add_event(259, 142, "end", "model_mdcev_rp");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
gamma_ll(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& gamma,
             const int& I,
             const int& J,
             const int& model_num, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        validate_non_negative_index("gamma_j", "I", I);
        validate_non_negative_index("gamma_j", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> gamma_j(I, J);
        stan::math::initialize(gamma_j, DUMMY_VAR__);
        stan::math::fill(gamma_j, DUMMY_VAR__);
        current_statement_begin__ = 8;
        if (as_bool(logical_eq(model_num, 2))) {
            current_statement_begin__ = 9;
            stan::math::assign(gamma_j, rep_matrix(1, I, J));
        } else {
            current_statement_begin__ = 11;
            stan::math::assign(gamma_j, rep_matrix(transpose(gamma), I));
        }
        current_statement_begin__ = 13;
        return stan::math::promote_scalar<fun_return_scalar_t__>(gamma_j);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gamma_ll_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& gamma,
             const int& I,
             const int& J,
             const int& model_num, std::ostream* pstream__) const {
        return gamma_ll(gamma, I, J, model_num, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
alpha_ll(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& alpha,
             const int& I,
             const int& J,
             const int& model_num, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 18;
        validate_non_negative_index("alpha_full", "I", I);
        validate_non_negative_index("alpha_full", "(J + 1)", (J + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_full(I, (J + 1));
        stan::math::initialize(alpha_full, DUMMY_VAR__);
        stan::math::fill(alpha_full, DUMMY_VAR__);
        current_statement_begin__ = 20;
        if (as_bool(logical_eq(model_num, 1))) {
            current_statement_begin__ = 21;
            stan::math::assign(alpha_full, append_col(rep_vector(get_base1(alpha, 1, "alpha", 1), I), rep_matrix(0, I, J)));
        } else if (as_bool(logical_eq(model_num, 2))) {
            current_statement_begin__ = 23;
            stan::math::assign(alpha_full, rep_matrix(transpose(alpha), I));
        } else if (as_bool(logical_eq(model_num, 3))) {
            current_statement_begin__ = 25;
            stan::math::assign(alpha_full, rep_matrix(get_base1(alpha, 1, "alpha", 1), I, (J + 1)));
        } else {
            current_statement_begin__ = 27;
            stan::math::assign(alpha_full, rep_matrix(1e-03, I, (J + 1)));
        }
        current_statement_begin__ = 29;
        return stan::math::promote_scalar<fun_return_scalar_t__>(alpha_full);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct alpha_ll_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& alpha,
             const int& I,
             const int& J,
             const int& model_num, std::ostream* pstream__) const {
        return alpha_ll(alpha, I, J, model_num, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T13__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T13__>::type>::type>::type, Eigen::Dynamic, 1>
mdcev_ll(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& quant_j,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& price_j,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& log_num,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& log_inc,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& M,
             const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& log_M_fact,
             const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& lpsi,
             const Eigen::Matrix<T7__, Eigen::Dynamic, Eigen::Dynamic>& gamma_j,
             const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& alpha1,
             const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& alpha_j,
             const T10__& scale_full,
             const int& I,
             const int& J,
             const Eigen::Matrix<T13__, Eigen::Dynamic, Eigen::Dynamic>& nonzero,
             const int& trunc_data, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T13__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 37;
        validate_non_negative_index("log_like", "I", I);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_like(I);
        stan::math::initialize(log_like, DUMMY_VAR__);
        stan::math::fill(log_like, DUMMY_VAR__);
        current_statement_begin__ = 38;
        validate_non_negative_index("ones_j", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ones_j(J);
        stan::math::initialize(ones_j, DUMMY_VAR__);
        stan::math::fill(ones_j, DUMMY_VAR__);
        stan::math::assign(ones_j,rep_vector(1, J));
        current_statement_begin__ = 39;
        validate_non_negative_index("v_j", "I", I);
        validate_non_negative_index("v_j", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> v_j(I, J);
        stan::math::initialize(v_j, DUMMY_VAR__);
        stan::math::fill(v_j, DUMMY_VAR__);
        stan::math::assign(v_j,subtract(add(lpsi, elt_multiply(subtract(alpha_j, 1), stan::math::log(add(elt_divide(quant_j, gamma_j), 1)))), stan::math::log(price_j)));
        current_statement_begin__ = 40;
        validate_non_negative_index("v1", "I", I);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v1(I);
        stan::math::initialize(v1, DUMMY_VAR__);
        stan::math::fill(v1, DUMMY_VAR__);
        stan::math::assign(v1,divide(elt_multiply(subtract(alpha1, 1), log_num), scale_full));
        current_statement_begin__ = 41;
        validate_non_negative_index("logf", "I", I);
        validate_non_negative_index("logf", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> logf(I, J);
        stan::math::initialize(logf, DUMMY_VAR__);
        stan::math::fill(logf, DUMMY_VAR__);
        stan::math::assign(logf,subtract(stan::math::log(subtract(1, alpha_j)), stan::math::log(add(quant_j, gamma_j))));
        current_statement_begin__ = 42;
        validate_non_negative_index("logf1", "I", I);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logf1(I);
        stan::math::initialize(logf1, DUMMY_VAR__);
        stan::math::fill(logf1, DUMMY_VAR__);
        stan::math::assign(logf1,subtract(stan::math::log(subtract(1, alpha1)), log_num));
        current_statement_begin__ = 43;
        stan::math::assign(v_j, divide(v_j, scale_full));
        current_statement_begin__ = 45;
        if (as_bool(logical_eq(trunc_data, 0))) {
            current_statement_begin__ = 46;
            stan::math::assign(log_like, add(subtract(add(add(add(add(multiply(subtract(1, M), stan::math::log(scale_full)), logf1), v1), multiply(elt_multiply(nonzero, add(logf, v_j)), ones_j)), stan::math::log(add(inv(stan::math::exp(logf1)), multiply(elt_divide(elt_multiply(nonzero, price_j), stan::math::exp(logf)), ones_j)))), elt_multiply(M, stan::math::log(add(stan::math::exp(v1), multiply(stan::math::exp(v_j), ones_j))))), log_M_fact));
        } else if (as_bool(logical_eq(trunc_data, 1))) {
            {
            current_statement_begin__ = 51;
            validate_non_negative_index("v_1", "I", I);
            validate_non_negative_index("v_1", "(J + 1)", (J + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> v_1(I, (J + 1));
            stan::math::initialize(v_1, DUMMY_VAR__);
            stan::math::fill(v_1, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("like_cond", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> like_cond(I);
            stan::math::initialize(like_cond, DUMMY_VAR__);
            stan::math::fill(like_cond, DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("like_trunc", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> like_trunc(I);
            stan::math::initialize(like_trunc, DUMMY_VAR__);
            stan::math::fill(like_trunc, DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("sumv", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sumv(I);
            stan::math::initialize(sumv, DUMMY_VAR__);
            stan::math::fill(sumv, DUMMY_VAR__);
            current_statement_begin__ = 56;
            stan::math::assign(like_cond, stan::math::exp(add(subtract(add(add(add(add(multiply(subtract(1, M), stan::math::log(scale_full)), logf1), v1), multiply(elt_multiply(nonzero, add(logf, v_j)), ones_j)), stan::math::log(add(inv(stan::math::exp(logf1)), multiply(elt_divide(elt_multiply(nonzero, price_j), stan::math::exp(logf)), ones_j)))), elt_multiply(M, stan::math::log(add(stan::math::exp(v1), multiply(stan::math::exp(v_j), ones_j))))), log_M_fact)));
            current_statement_begin__ = 60;
            stan::math::assign(v_1, append_col(elt_multiply(subtract(alpha1, 1), log_inc), subtract(lpsi, stan::math::log(price_j))));
            current_statement_begin__ = 61;
            stan::math::assign(v_1, stan::math::exp(divide(v_1, scale_full)));
            current_statement_begin__ = 62;
            stan::math::assign(sumv, multiply(v_1, rep_vector(1, (J + 1))));
            current_statement_begin__ = 64;
            stan::math::assign(like_trunc, elt_divide(col(v_1, 1), sumv));
            current_statement_begin__ = 66;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 67;
                stan::model::assign(like_trunc, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_lt(get_base1(like_trunc, i, "like_trunc", 1), 1) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(like_trunc, i, "like_trunc", 1)) : stan::math::promote_scalar<local_scalar_t__>(1) ), 
                            "assigning variable like_trunc");
            }
            current_statement_begin__ = 69;
            stan::math::assign(log_like, stan::math::log(elt_divide(like_cond, subtract(1, like_trunc))));
            }
        }
        current_statement_begin__ = 72;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_like);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct mdcev_ll_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T13__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T13__>::type>::type>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& quant_j,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& price_j,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& log_num,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& log_inc,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& M,
             const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& log_M_fact,
             const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& lpsi,
             const Eigen::Matrix<T7__, Eigen::Dynamic, Eigen::Dynamic>& gamma_j,
             const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& alpha1,
             const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& alpha_j,
             const T10__& scale_full,
             const int& I,
             const int& J,
             const Eigen::Matrix<T13__, Eigen::Dynamic, Eigen::Dynamic>& nonzero,
             const int& trunc_data, std::ostream* pstream__) const {
        return mdcev_ll(quant_j, price_j, log_num, log_inc, M, log_M_fact, lpsi, gamma_j, alpha1, alpha_j, scale_full, I, J, nonzero, trunc_data, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_mdcev_rp : public prob_grad {
private:
        int I;
        int J;
        int NPsi;
        matrix_d dat_psi;
        matrix_d price_j;
        matrix_d quant_j;
        vector_d income;
        int flat_priors;
        double prior_psi_sd;
        double prior_gamma_sd;
        double prior_alpha_sd;
        double prior_scale_sd;
        int model_num;
        int fixed_scale1;
        int trunc_data;
        vector_d weights;
        int corr;
        std::vector<int> task;
        std::vector<int> task_individual;
        std::vector<int> start;
        std::vector<int> end;
        double lkj_shape;
        int gamma_fixed;
        int alpha_fixed;
        int RP;
        int RP_g;
        int RP_a;
        int G;
        int A;
        int Gamma;
        vector_d log_inc;
        vector_d log_num;
        matrix_d nonzero;
        vector_d M;
        vector_d log_M_fact;
public:
    model_mdcev_rp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mdcev_rp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mdcev_rp_namespace::model_mdcev_rp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "I", "int", context__.to_vec());
            I = int(0);
            vals_i__ = context__.vals_i("I");
            pos__ = 0;
            I = vals_i__[pos__++];
            current_statement_begin__ = 80;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 81;
            context__.validate_dims("data initialization", "NPsi", "int", context__.to_vec());
            NPsi = int(0);
            vals_i__ = context__.vals_i("NPsi");
            pos__ = 0;
            NPsi = vals_i__[pos__++];
            current_statement_begin__ = 82;
            validate_non_negative_index("dat_psi", "(I * J)", (I * J));
            validate_non_negative_index("dat_psi", "NPsi", NPsi);
            context__.validate_dims("data initialization", "dat_psi", "matrix_d", context__.to_vec((I * J),NPsi));
            dat_psi = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((I * J), NPsi);
            vals_r__ = context__.vals_r("dat_psi");
            pos__ = 0;
            size_t dat_psi_j_2_max__ = NPsi;
            size_t dat_psi_j_1_max__ = (I * J);
            for (size_t j_2__ = 0; j_2__ < dat_psi_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < dat_psi_j_1_max__; ++j_1__) {
                    dat_psi(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 83;
            validate_non_negative_index("price_j", "I", I);
            validate_non_negative_index("price_j", "J", J);
            context__.validate_dims("data initialization", "price_j", "matrix_d", context__.to_vec(I,J));
            price_j = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(I, J);
            vals_r__ = context__.vals_r("price_j");
            pos__ = 0;
            size_t price_j_j_2_max__ = J;
            size_t price_j_j_1_max__ = I;
            for (size_t j_2__ = 0; j_2__ < price_j_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < price_j_j_1_max__; ++j_1__) {
                    price_j(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 84;
            validate_non_negative_index("quant_j", "I", I);
            validate_non_negative_index("quant_j", "J", J);
            context__.validate_dims("data initialization", "quant_j", "matrix_d", context__.to_vec(I,J));
            quant_j = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(I, J);
            vals_r__ = context__.vals_r("quant_j");
            pos__ = 0;
            size_t quant_j_j_2_max__ = J;
            size_t quant_j_j_1_max__ = I;
            for (size_t j_2__ = 0; j_2__ < quant_j_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < quant_j_j_1_max__; ++j_1__) {
                    quant_j(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 85;
            validate_non_negative_index("income", "I", I);
            context__.validate_dims("data initialization", "income", "vector_d", context__.to_vec(I));
            income = Eigen::Matrix<double, Eigen::Dynamic, 1>(I);
            vals_r__ = context__.vals_r("income");
            pos__ = 0;
            size_t income_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < income_j_1_max__; ++j_1__) {
                income(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 86;
            context__.validate_dims("data initialization", "flat_priors", "int", context__.to_vec());
            flat_priors = int(0);
            vals_i__ = context__.vals_i("flat_priors");
            pos__ = 0;
            flat_priors = vals_i__[pos__++];
            check_greater_or_equal(function__, "flat_priors", flat_priors, 0);
            check_less_or_equal(function__, "flat_priors", flat_priors, 1);
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "prior_psi_sd", "double", context__.to_vec());
            prior_psi_sd = double(0);
            vals_r__ = context__.vals_r("prior_psi_sd");
            pos__ = 0;
            prior_psi_sd = vals_r__[pos__++];
            current_statement_begin__ = 88;
            context__.validate_dims("data initialization", "prior_gamma_sd", "double", context__.to_vec());
            prior_gamma_sd = double(0);
            vals_r__ = context__.vals_r("prior_gamma_sd");
            pos__ = 0;
            prior_gamma_sd = vals_r__[pos__++];
            current_statement_begin__ = 89;
            context__.validate_dims("data initialization", "prior_alpha_sd", "double", context__.to_vec());
            prior_alpha_sd = double(0);
            vals_r__ = context__.vals_r("prior_alpha_sd");
            pos__ = 0;
            prior_alpha_sd = vals_r__[pos__++];
            current_statement_begin__ = 90;
            context__.validate_dims("data initialization", "prior_scale_sd", "double", context__.to_vec());
            prior_scale_sd = double(0);
            vals_r__ = context__.vals_r("prior_scale_sd");
            pos__ = 0;
            prior_scale_sd = vals_r__[pos__++];
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "model_num", "int", context__.to_vec());
            model_num = int(0);
            vals_i__ = context__.vals_i("model_num");
            pos__ = 0;
            model_num = vals_i__[pos__++];
            check_greater_or_equal(function__, "model_num", model_num, 1);
            check_less_or_equal(function__, "model_num", model_num, 4);
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "fixed_scale1", "int", context__.to_vec());
            fixed_scale1 = int(0);
            vals_i__ = context__.vals_i("fixed_scale1");
            pos__ = 0;
            fixed_scale1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "fixed_scale1", fixed_scale1, 0);
            check_less_or_equal(function__, "fixed_scale1", fixed_scale1, 1);
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "trunc_data", "int", context__.to_vec());
            trunc_data = int(0);
            vals_i__ = context__.vals_i("trunc_data");
            pos__ = 0;
            trunc_data = vals_i__[pos__++];
            check_greater_or_equal(function__, "trunc_data", trunc_data, 0);
            check_less_or_equal(function__, "trunc_data", trunc_data, 1);
            current_statement_begin__ = 94;
            validate_non_negative_index("weights", "I", I);
            context__.validate_dims("data initialization", "weights", "vector_d", context__.to_vec(I));
            weights = Eigen::Matrix<double, Eigen::Dynamic, 1>(I);
            vals_r__ = context__.vals_r("weights");
            pos__ = 0;
            size_t weights_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < weights_j_1_max__; ++j_1__) {
                weights(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "corr", "int", context__.to_vec());
            corr = int(0);
            vals_i__ = context__.vals_i("corr");
            pos__ = 0;
            corr = vals_i__[pos__++];
            check_greater_or_equal(function__, "corr", corr, 0);
            check_less_or_equal(function__, "corr", corr, 1);
            current_statement_begin__ = 96;
            validate_non_negative_index("task", "I", I);
            context__.validate_dims("data initialization", "task", "int", context__.to_vec(I));
            task = std::vector<int>(I, int(0));
            vals_i__ = context__.vals_i("task");
            pos__ = 0;
            size_t task_k_0_max__ = I;
            for (size_t k_0__ = 0; k_0__ < task_k_0_max__; ++k_0__) {
                task[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 97;
            validate_non_negative_index("task_individual", "I", I);
            context__.validate_dims("data initialization", "task_individual", "int", context__.to_vec(I));
            task_individual = std::vector<int>(I, int(0));
            vals_i__ = context__.vals_i("task_individual");
            pos__ = 0;
            size_t task_individual_k_0_max__ = I;
            for (size_t k_0__ = 0; k_0__ < task_individual_k_0_max__; ++k_0__) {
                task_individual[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 98;
            validate_non_negative_index("start", "I", I);
            context__.validate_dims("data initialization", "start", "int", context__.to_vec(I));
            start = std::vector<int>(I, int(0));
            vals_i__ = context__.vals_i("start");
            pos__ = 0;
            size_t start_k_0_max__ = I;
            for (size_t k_0__ = 0; k_0__ < start_k_0_max__; ++k_0__) {
                start[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 99;
            validate_non_negative_index("end", "I", I);
            context__.validate_dims("data initialization", "end", "int", context__.to_vec(I));
            end = std::vector<int>(I, int(0));
            vals_i__ = context__.vals_i("end");
            pos__ = 0;
            size_t end_k_0_max__ = I;
            for (size_t k_0__ = 0; k_0__ < end_k_0_max__; ++k_0__) {
                end[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 100;
            context__.validate_dims("data initialization", "lkj_shape", "double", context__.to_vec());
            lkj_shape = double(0);
            vals_r__ = context__.vals_r("lkj_shape");
            pos__ = 0;
            lkj_shape = vals_r__[pos__++];
            check_greater_or_equal(function__, "lkj_shape", lkj_shape, 1);
            current_statement_begin__ = 102;
            context__.validate_dims("data initialization", "gamma_fixed", "int", context__.to_vec());
            gamma_fixed = int(0);
            vals_i__ = context__.vals_i("gamma_fixed");
            pos__ = 0;
            gamma_fixed = vals_i__[pos__++];
            check_greater_or_equal(function__, "gamma_fixed", gamma_fixed, 0);
            check_less_or_equal(function__, "gamma_fixed", gamma_fixed, 1);
            current_statement_begin__ = 103;
            context__.validate_dims("data initialization", "alpha_fixed", "int", context__.to_vec());
            alpha_fixed = int(0);
            vals_i__ = context__.vals_i("alpha_fixed");
            pos__ = 0;
            alpha_fixed = vals_i__[pos__++];
            check_greater_or_equal(function__, "alpha_fixed", alpha_fixed, 0);
            check_less_or_equal(function__, "alpha_fixed", alpha_fixed, 1);
            // initialize transformed data variables
            current_statement_begin__ = 107;
            RP = int(0);
            stan::math::fill(RP, std::numeric_limits<int>::min());
            current_statement_begin__ = 108;
            RP_g = int(0);
            stan::math::fill(RP_g, std::numeric_limits<int>::min());
            current_statement_begin__ = 109;
            RP_a = int(0);
            stan::math::fill(RP_a, std::numeric_limits<int>::min());
            current_statement_begin__ = 111;
            G = int(0);
            stan::math::fill(G, std::numeric_limits<int>::min());
            stan::math::assign(G,(J + 1));
            current_statement_begin__ = 112;
            A = int(0);
            stan::math::fill(A, std::numeric_limits<int>::min());
            current_statement_begin__ = 113;
            Gamma = int(0);
            stan::math::fill(Gamma, std::numeric_limits<int>::min());
            current_statement_begin__ = 114;
            validate_non_negative_index("log_inc", "I", I);
            log_inc = Eigen::Matrix<double, Eigen::Dynamic, 1>(I);
            stan::math::fill(log_inc, DUMMY_VAR__);
            stan::math::assign(log_inc,stan::math::log(income));
            current_statement_begin__ = 115;
            validate_non_negative_index("log_num", "I", I);
            log_num = Eigen::Matrix<double, Eigen::Dynamic, 1>(I);
            stan::math::fill(log_num, DUMMY_VAR__);
            current_statement_begin__ = 116;
            validate_non_negative_index("nonzero", "I", I);
            validate_non_negative_index("nonzero", "J", J);
            nonzero = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(I, J);
            stan::math::fill(nonzero, DUMMY_VAR__);
            current_statement_begin__ = 117;
            validate_non_negative_index("M", "I", I);
            M = Eigen::Matrix<double, Eigen::Dynamic, 1>(I);
            stan::math::fill(M, DUMMY_VAR__);
            current_statement_begin__ = 118;
            validate_non_negative_index("log_M_fact", "I", I);
            log_M_fact = Eigen::Matrix<double, Eigen::Dynamic, 1>(I);
            stan::math::fill(log_M_fact, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 120;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 121;
                stan::model::assign(log_num, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::log((get_base1(income, i, "income", 1) - multiply(get_base1(price_j, i, "price_j", 1), transpose(get_base1(quant_j, i, "quant_j", 1))))), 
                            "assigning variable log_num");
                current_statement_begin__ = 122;
                for (int j = 1; j <= J; ++j) {
                    current_statement_begin__ = 123;
                    stan::model::assign(nonzero, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (logical_gt(get_base1(quant_j, i, j, "quant_j", 1), 0) ? 1 : 0 ), 
                                "assigning variable nonzero");
                }
                current_statement_begin__ = 125;
                stan::model::assign(M, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (sum(get_base1(nonzero, i, "nonzero", 1)) + 1), 
                            "assigning variable M");
            }
            current_statement_begin__ = 128;
            stan::math::assign(log_M_fact, stan::math::lgamma(M));
            current_statement_begin__ = 130;
            if (as_bool((primitive_value(logical_eq(model_num, 1)) || primitive_value(logical_eq(model_num, 3))))) {
                current_statement_begin__ = 131;
                stan::math::assign(A, 1);
                current_statement_begin__ = 132;
                stan::math::assign(Gamma, J);
            } else if (as_bool(logical_eq(model_num, 2))) {
                current_statement_begin__ = 134;
                stan::math::assign(A, G);
                current_statement_begin__ = 135;
                stan::math::assign(Gamma, 0);
            } else if (as_bool(logical_eq(model_num, 4))) {
                current_statement_begin__ = 137;
                stan::math::assign(A, 0);
                current_statement_begin__ = 138;
                stan::math::assign(Gamma, J);
            }
            {
            current_statement_begin__ = 141;
            int n_gamma_rp(0);
            (void) n_gamma_rp;  // dummy to suppress unused var warning
            stan::math::fill(n_gamma_rp, std::numeric_limits<int>::min());
            stan::math::assign(n_gamma_rp,(logical_eq(gamma_fixed, 0) ? Gamma : 0 ));
            current_statement_begin__ = 142;
            int n_alpha_rp(0);
            (void) n_alpha_rp;  // dummy to suppress unused var warning
            stan::math::fill(n_alpha_rp, std::numeric_limits<int>::min());
            stan::math::assign(n_alpha_rp,(logical_eq(alpha_fixed, 0) ? A : 0 ));
            current_statement_begin__ = 143;
            stan::math::assign(RP, ((NPsi + n_gamma_rp) + n_alpha_rp));
            current_statement_begin__ = 144;
            stan::math::assign(RP_g, (NPsi + 1));
            current_statement_begin__ = 145;
            stan::math::assign(RP_a, ((NPsi + n_gamma_rp) + 1));
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 153;
            validate_non_negative_index("gamma", "(logical_eq(gamma_fixed, 1) ? Gamma : 0 )", (logical_eq(gamma_fixed, 1) ? Gamma : 0 ));
            num_params_r__ += (logical_eq(gamma_fixed, 1) ? Gamma : 0 );
            current_statement_begin__ = 154;
            validate_non_negative_index("alpha", "(logical_eq(alpha_fixed, 1) ? A : 0 )", (logical_eq(alpha_fixed, 1) ? A : 0 ));
            num_params_r__ += (logical_eq(alpha_fixed, 1) ? A : 0 );
            current_statement_begin__ = 155;
            validate_non_negative_index("mu", "RP", RP);
            num_params_r__ += RP;
            current_statement_begin__ = 156;
            validate_non_negative_index("z", "I", I);
            validate_non_negative_index("z", "RP", RP);
            num_params_r__ += (I * RP);
            current_statement_begin__ = 157;
            validate_non_negative_index("L_Omega", "(logical_eq(corr, 1) ? RP : 0 )", (logical_eq(corr, 1) ? RP : 0 ));
            validate_non_negative_index("L_Omega", "(logical_eq(corr, 1) ? RP : 0 )", (logical_eq(corr, 1) ? RP : 0 ));
            num_params_r__ += (((logical_eq(corr, 1) ? RP : 0 ) * ((logical_eq(corr, 1) ? RP : 0 ) - 1)) / 2);
            current_statement_begin__ = 158;
            validate_non_negative_index("tau_unif", "RP", RP);
            num_params_r__ += RP;
            current_statement_begin__ = 159;
            validate_non_negative_index("scale", "(logical_eq(fixed_scale1, 0) ? 1 : 0 )", (logical_eq(fixed_scale1, 0) ? 1 : 0 ));
            num_params_r__ += (logical_eq(fixed_scale1, 0) ? 1 : 0 );
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mdcev_rp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 153;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "(logical_eq(gamma_fixed, 1) ? Gamma : 0 )", (logical_eq(gamma_fixed, 1) ? Gamma : 0 ));
        context__.validate_dims("parameter initialization", "gamma", "vector_d", context__.to_vec((logical_eq(gamma_fixed, 1) ? Gamma : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma((logical_eq(gamma_fixed, 1) ? Gamma : 0 ));
        size_t gamma_j_1_max__ = (logical_eq(gamma_fixed, 1) ? Gamma : 0 );
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 154;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "(logical_eq(alpha_fixed, 1) ? A : 0 )", (logical_eq(alpha_fixed, 1) ? A : 0 ));
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec((logical_eq(alpha_fixed, 1) ? A : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha((logical_eq(alpha_fixed, 1) ? A : 0 ));
        size_t alpha_j_1_max__ = (logical_eq(alpha_fixed, 1) ? A : 0 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 155;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "RP", RP);
        context__.validate_dims("parameter initialization", "mu", "vector_d", context__.to_vec(RP));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu(RP);
        size_t mu_j_1_max__ = RP;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 156;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "I", I);
        validate_non_negative_index("z", "RP", RP);
        context__.validate_dims("parameter initialization", "z", "matrix_d", context__.to_vec(I,RP));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z(I, RP);
        size_t z_j_2_max__ = RP;
        size_t z_j_1_max__ = I;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                z(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 157;
        if (!(context__.contains_r("L_Omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Omega");
        pos__ = 0U;
        validate_non_negative_index("L_Omega", "(logical_eq(corr, 1) ? RP : 0 )", (logical_eq(corr, 1) ? RP : 0 ));
        validate_non_negative_index("L_Omega", "(logical_eq(corr, 1) ? RP : 0 )", (logical_eq(corr, 1) ? RP : 0 ));
        context__.validate_dims("parameter initialization", "L_Omega", "matrix_d", context__.to_vec((logical_eq(corr, 1) ? RP : 0 ),(logical_eq(corr, 1) ? RP : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega((logical_eq(corr, 1) ? RP : 0 ), (logical_eq(corr, 1) ? RP : 0 ));
        size_t L_Omega_j_2_max__ = (logical_eq(corr, 1) ? RP : 0 );
        size_t L_Omega_j_1_max__ = (logical_eq(corr, 1) ? RP : 0 );
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                L_Omega(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 158;
        if (!(context__.contains_r("tau_unif")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_unif missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_unif");
        pos__ = 0U;
        validate_non_negative_index("tau_unif", "RP", RP);
        context__.validate_dims("parameter initialization", "tau_unif", "vector_d", context__.to_vec(RP));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_unif(RP);
        size_t tau_unif_j_1_max__ = RP;
        for (size_t j_1__ = 0; j_1__ < tau_unif_j_1_max__; ++j_1__) {
            tau_unif(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, (stan::math::pi() / 2), tau_unif);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_unif: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 159;
        if (!(context__.contains_r("scale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable scale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("scale");
        pos__ = 0U;
        validate_non_negative_index("scale", "(logical_eq(fixed_scale1, 0) ? 1 : 0 )", (logical_eq(fixed_scale1, 0) ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "scale", "vector_d", context__.to_vec((logical_eq(fixed_scale1, 0) ? 1 : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> scale((logical_eq(fixed_scale1, 0) ? 1 : 0 ));
        size_t scale_j_1_max__ = (logical_eq(fixed_scale1, 0) ? 1 : 0 );
        for (size_t j_1__ = 0; j_1__ < scale_j_1_max__; ++j_1__) {
            scale(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, scale);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable scale: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 153;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.vector_lb_constrain(0, (logical_eq(gamma_fixed, 1) ? Gamma : 0 ), lp__);
            else
                gamma = in__.vector_lb_constrain(0, (logical_eq(gamma_fixed, 1) ? Gamma : 0 ));
            current_statement_begin__ = 154;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lub_constrain(0, 1, (logical_eq(alpha_fixed, 1) ? A : 0 ), lp__);
            else
                alpha = in__.vector_lub_constrain(0, 1, (logical_eq(alpha_fixed, 1) ? A : 0 ));
            current_statement_begin__ = 155;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.vector_constrain(RP, lp__);
            else
                mu = in__.vector_constrain(RP);
            current_statement_begin__ = 156;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z;
            (void) z;  // dummy to suppress unused var warning
            if (jacobian__)
                z = in__.matrix_constrain(I, RP, lp__);
            else
                z = in__.matrix_constrain(I, RP);
            current_statement_begin__ = 157;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Omega;
            (void) L_Omega;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega = in__.cholesky_factor_corr_constrain((logical_eq(corr, 1) ? RP : 0 ), lp__);
            else
                L_Omega = in__.cholesky_factor_corr_constrain((logical_eq(corr, 1) ? RP : 0 ));
            current_statement_begin__ = 158;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_unif;
            (void) tau_unif;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_unif = in__.vector_lub_constrain(0, (stan::math::pi() / 2), RP, lp__);
            else
                tau_unif = in__.vector_lub_constrain(0, (stan::math::pi() / 2), RP);
            current_statement_begin__ = 159;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> scale;
            (void) scale;  // dummy to suppress unused var warning
            if (jacobian__)
                scale = in__.vector_lb_constrain(0, (logical_eq(fixed_scale1, 0) ? 1 : 0 ), lp__);
            else
                scale = in__.vector_lb_constrain(0, (logical_eq(fixed_scale1, 0) ? 1 : 0 ));
            // transformed parameters
            current_statement_begin__ = 163;
            validate_non_negative_index("log_like", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_like(I);
            stan::math::initialize(log_like, DUMMY_VAR__);
            stan::math::fill(log_like, DUMMY_VAR__);
            current_statement_begin__ = 164;
            validate_non_negative_index("tau", "RP", RP);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau(RP);
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 167;
            validate_non_negative_index("beta", "I", I);
            validate_non_negative_index("beta", "RP", RP);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta(I, RP);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 168;
            validate_non_negative_index("lpsi", "I", I);
            validate_non_negative_index("lpsi", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> lpsi(I, J);
            stan::math::initialize(lpsi, DUMMY_VAR__);
            stan::math::fill(lpsi, DUMMY_VAR__);
            current_statement_begin__ = 169;
            validate_non_negative_index("psi_individual", "I", I);
            validate_non_negative_index("psi_individual", "NPsi", NPsi);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> psi_individual(I, NPsi);
            stan::math::initialize(psi_individual, DUMMY_VAR__);
            stan::math::fill(psi_individual, DUMMY_VAR__);
            current_statement_begin__ = 170;
            validate_non_negative_index("alpha_full", "I", I);
            validate_non_negative_index("alpha_full", "(J + 1)", (J + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_full(I, (J + 1));
            stan::math::initialize(alpha_full, DUMMY_VAR__);
            stan::math::fill(alpha_full, DUMMY_VAR__);
            current_statement_begin__ = 171;
            validate_non_negative_index("alpha_individual_1", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_individual_1(I);
            stan::math::initialize(alpha_individual_1, DUMMY_VAR__);
            stan::math::fill(alpha_individual_1, DUMMY_VAR__);
            current_statement_begin__ = 172;
            validate_non_negative_index("alpha_individual_j", "I", I);
            validate_non_negative_index("alpha_individual_j", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_individual_j(I, J);
            stan::math::initialize(alpha_individual_j, DUMMY_VAR__);
            stan::math::fill(alpha_individual_j, DUMMY_VAR__);
            current_statement_begin__ = 173;
            validate_non_negative_index("gamma_individual", "I", I);
            validate_non_negative_index("gamma_individual", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> gamma_individual(I, J);
            stan::math::initialize(gamma_individual, DUMMY_VAR__);
            stan::math::fill(gamma_individual, DUMMY_VAR__);
            current_statement_begin__ = 174;
            local_scalar_t__ scale_full(DUMMY_VAR__);
            (void) scale_full;  // dummy to suppress unused var warning
            stan::math::initialize(scale_full, DUMMY_VAR__);
            stan::math::fill(scale_full, DUMMY_VAR__);
            stan::math::assign(scale_full,(logical_eq(fixed_scale1, 0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(scale, 1, "scale", 1)) : stan::math::promote_scalar<local_scalar_t__>(1.0) ));
            current_statement_begin__ = 176;
            for (int rp = 1; rp <= RP; ++rp) {
                current_statement_begin__ = 176;
                stan::model::assign(tau, 
                            stan::model::cons_list(stan::model::index_uni(rp), stan::model::nil_index_list()), 
                            (2.5 * stan::math::tan(get_base1(tau_unif, rp, "tau_unif", 1))), 
                            "assigning variable tau");
            }
            current_statement_begin__ = 179;
            if (as_bool(logical_eq(corr, 1))) {
                current_statement_begin__ = 180;
                stan::math::assign(beta, add(rep_matrix(transpose(mu), I), multiply(z, diag_pre_multiply(tau, L_Omega))));
            } else if (as_bool(logical_eq(corr, 0))) {
                current_statement_begin__ = 182;
                stan::math::assign(beta, add(rep_matrix(transpose(mu), I), diag_post_multiply(z, tau)));
            }
            current_statement_begin__ = 185;
            if (as_bool(logical_eq(alpha_fixed, 0))) {
                current_statement_begin__ = 186;
                if (as_bool(logical_lt(model_num, 4))) {
                    current_statement_begin__ = 187;
                    stan::math::assign(alpha_individual_1, inv(add(1, stan::math::exp(minus(col(beta, RP_a))))));
                    current_statement_begin__ = 188;
                    if (as_bool(logical_eq(model_num, 1))) {
                        current_statement_begin__ = 189;
                        stan::math::assign(alpha_individual_j, rep_matrix(0, I, J));
                    } else if (as_bool(logical_eq(model_num, 2))) {
                        current_statement_begin__ = 191;
                        stan::math::assign(alpha_individual_j, inv(add(1, stan::math::exp(minus(block(beta, 1, (RP_a + 1), I, J))))));
                    } else {
                        current_statement_begin__ = 193;
                        stan::math::assign(alpha_individual_j, rep_matrix(alpha_individual_1, J));
                    }
                } else {
                    current_statement_begin__ = 195;
                    stan::math::assign(alpha_individual_1, rep_vector(1e-03, I));
                    current_statement_begin__ = 196;
                    stan::math::assign(alpha_individual_j, rep_matrix(1e-03, I, J));
                }
            } else if (as_bool(logical_eq(alpha_fixed, 1))) {
                current_statement_begin__ = 199;
                stan::math::assign(alpha_full, alpha_ll(alpha, I, J, model_num, pstream__));
                current_statement_begin__ = 200;
                stan::math::assign(alpha_individual_1, col(alpha_full, 1));
                current_statement_begin__ = 201;
                stan::math::assign(alpha_individual_j, block(alpha_full, 1, 2, I, J));
            }
            current_statement_begin__ = 204;
            if (as_bool(logical_eq(gamma_fixed, 0))) {
                current_statement_begin__ = 205;
                if (as_bool(logical_eq(model_num, 2))) {
                    current_statement_begin__ = 206;
                    stan::math::assign(gamma_individual, rep_matrix(1, I, J));
                } else {
                    current_statement_begin__ = 208;
                    stan::math::assign(gamma_individual, stan::math::exp(block(beta, 1, RP_g, I, J)));
                }
            } else if (as_bool(logical_eq(gamma_fixed, 1))) {
                current_statement_begin__ = 210;
                stan::math::assign(gamma_individual, gamma_ll(gamma, I, J, model_num, pstream__));
            }
            current_statement_begin__ = 213;
            stan::math::assign(psi_individual, block(beta, 1, 1, I, NPsi));
            current_statement_begin__ = 215;
            for (int t = 1; t <= I; ++t) {
                {
                current_statement_begin__ = 216;
                validate_non_negative_index("util", "J", J);
                Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> util(J);
                stan::math::initialize(util, DUMMY_VAR__);
                stan::math::fill(util, DUMMY_VAR__);
                current_statement_begin__ = 217;
                stan::math::assign(util, multiply(get_base1(psi_individual, get_base1(task_individual, t, "task_individual", 1), "psi_individual", 1), transpose(stan::model::rvalue(dat_psi, stan::model::cons_list(stan::model::index_min_max(get_base1(start, t, "start", 1), get_base1(end, t, "end", 1)), stan::model::nil_index_list()), "dat_psi"))));
                current_statement_begin__ = 218;
                stan::model::assign(lpsi, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            util, 
                            "assigning variable lpsi");
                }
            }
            current_statement_begin__ = 221;
            stan::math::assign(log_like, mdcev_ll(quant_j, price_j, log_num, log_inc, M, log_M_fact, lpsi, gamma_individual, alpha_individual_1, alpha_individual_j, scale_full, I, J, nonzero, trunc_data, pstream__));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 163;
            size_t log_like_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < log_like_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(log_like(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: log_like" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_like: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 164;
            size_t tau_j_1_max__ = RP;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(tau(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: tau" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tau: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "tau", tau, 0);
            // model body
            current_statement_begin__ = 229;
            lp_accum__.add(normal_log<propto__>(gamma, 0, prior_gamma_sd));
            current_statement_begin__ = 230;
            lp_accum__.add(normal_log<propto__>(alpha, .5, prior_alpha_sd));
            current_statement_begin__ = 231;
            lp_accum__.add(normal_log<propto__>(to_vector(z), 0, 1));
            current_statement_begin__ = 232;
            lp_accum__.add(normal_log<propto__>(to_vector(mu), 0, 10));
            current_statement_begin__ = 233;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega, lkj_shape));
            current_statement_begin__ = 234;
            lp_accum__.add(normal_log<propto__>(scale, 1, 1));
            current_statement_begin__ = 236;
            lp_accum__.add(sum(elt_multiply(log_like, weights)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("gamma");
        names__.push_back("alpha");
        names__.push_back("mu");
        names__.push_back("z");
        names__.push_back("L_Omega");
        names__.push_back("tau_unif");
        names__.push_back("scale");
        names__.push_back("log_like");
        names__.push_back("tau");
        names__.push_back("sum_log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((logical_eq(gamma_fixed, 1) ? Gamma : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(alpha_fixed, 1) ? A : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(RP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dims__.push_back(RP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(corr, 1) ? RP : 0 ));
        dims__.push_back((logical_eq(corr, 1) ? RP : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(RP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(fixed_scale1, 0) ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(I);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(RP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mdcev_rp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma = in__.vector_lb_constrain(0, (logical_eq(gamma_fixed, 1) ? Gamma : 0 ));
        size_t gamma_j_1_max__ = (logical_eq(gamma_fixed, 1) ? Gamma : 0 );
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            vars__.push_back(gamma(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_lub_constrain(0, 1, (logical_eq(alpha_fixed, 1) ? A : 0 ));
        size_t alpha_j_1_max__ = (logical_eq(alpha_fixed, 1) ? A : 0 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu = in__.vector_constrain(RP);
        size_t mu_j_1_max__ = RP;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            vars__.push_back(mu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z = in__.matrix_constrain(I, RP);
        size_t z_j_2_max__ = RP;
        size_t z_j_1_max__ = I;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                vars__.push_back(z(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega = in__.cholesky_factor_corr_constrain((logical_eq(corr, 1) ? RP : 0 ));
        size_t L_Omega_j_2_max__ = (logical_eq(corr, 1) ? RP : 0 );
        size_t L_Omega_j_1_max__ = (logical_eq(corr, 1) ? RP : 0 );
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                vars__.push_back(L_Omega(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_unif = in__.vector_lub_constrain(0, (stan::math::pi() / 2), RP);
        size_t tau_unif_j_1_max__ = RP;
        for (size_t j_1__ = 0; j_1__ < tau_unif_j_1_max__; ++j_1__) {
            vars__.push_back(tau_unif(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> scale = in__.vector_lb_constrain(0, (logical_eq(fixed_scale1, 0) ? 1 : 0 ));
        size_t scale_j_1_max__ = (logical_eq(fixed_scale1, 0) ? 1 : 0 );
        for (size_t j_1__ = 0; j_1__ < scale_j_1_max__; ++j_1__) {
            vars__.push_back(scale(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 163;
            validate_non_negative_index("log_like", "I", I);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_like(I);
            stan::math::initialize(log_like, DUMMY_VAR__);
            stan::math::fill(log_like, DUMMY_VAR__);
            current_statement_begin__ = 164;
            validate_non_negative_index("tau", "RP", RP);
            Eigen::Matrix<double, Eigen::Dynamic, 1> tau(RP);
            stan::math::initialize(tau, DUMMY_VAR__);
            stan::math::fill(tau, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 167;
            validate_non_negative_index("beta", "I", I);
            validate_non_negative_index("beta", "RP", RP);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta(I, RP);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 168;
            validate_non_negative_index("lpsi", "I", I);
            validate_non_negative_index("lpsi", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> lpsi(I, J);
            stan::math::initialize(lpsi, DUMMY_VAR__);
            stan::math::fill(lpsi, DUMMY_VAR__);
            current_statement_begin__ = 169;
            validate_non_negative_index("psi_individual", "I", I);
            validate_non_negative_index("psi_individual", "NPsi", NPsi);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> psi_individual(I, NPsi);
            stan::math::initialize(psi_individual, DUMMY_VAR__);
            stan::math::fill(psi_individual, DUMMY_VAR__);
            current_statement_begin__ = 170;
            validate_non_negative_index("alpha_full", "I", I);
            validate_non_negative_index("alpha_full", "(J + 1)", (J + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_full(I, (J + 1));
            stan::math::initialize(alpha_full, DUMMY_VAR__);
            stan::math::fill(alpha_full, DUMMY_VAR__);
            current_statement_begin__ = 171;
            validate_non_negative_index("alpha_individual_1", "I", I);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_individual_1(I);
            stan::math::initialize(alpha_individual_1, DUMMY_VAR__);
            stan::math::fill(alpha_individual_1, DUMMY_VAR__);
            current_statement_begin__ = 172;
            validate_non_negative_index("alpha_individual_j", "I", I);
            validate_non_negative_index("alpha_individual_j", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> alpha_individual_j(I, J);
            stan::math::initialize(alpha_individual_j, DUMMY_VAR__);
            stan::math::fill(alpha_individual_j, DUMMY_VAR__);
            current_statement_begin__ = 173;
            validate_non_negative_index("gamma_individual", "I", I);
            validate_non_negative_index("gamma_individual", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> gamma_individual(I, J);
            stan::math::initialize(gamma_individual, DUMMY_VAR__);
            stan::math::fill(gamma_individual, DUMMY_VAR__);
            current_statement_begin__ = 174;
            local_scalar_t__ scale_full(DUMMY_VAR__);
            (void) scale_full;  // dummy to suppress unused var warning
            stan::math::initialize(scale_full, DUMMY_VAR__);
            stan::math::fill(scale_full, DUMMY_VAR__);
            stan::math::assign(scale_full,(logical_eq(fixed_scale1, 0) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(scale, 1, "scale", 1)) : stan::math::promote_scalar<local_scalar_t__>(1.0) ));
            current_statement_begin__ = 176;
            for (int rp = 1; rp <= RP; ++rp) {
                current_statement_begin__ = 176;
                stan::model::assign(tau, 
                            stan::model::cons_list(stan::model::index_uni(rp), stan::model::nil_index_list()), 
                            (2.5 * stan::math::tan(get_base1(tau_unif, rp, "tau_unif", 1))), 
                            "assigning variable tau");
            }
            current_statement_begin__ = 179;
            if (as_bool(logical_eq(corr, 1))) {
                current_statement_begin__ = 180;
                stan::math::assign(beta, add(rep_matrix(transpose(mu), I), multiply(z, diag_pre_multiply(tau, L_Omega))));
            } else if (as_bool(logical_eq(corr, 0))) {
                current_statement_begin__ = 182;
                stan::math::assign(beta, add(rep_matrix(transpose(mu), I), diag_post_multiply(z, tau)));
            }
            current_statement_begin__ = 185;
            if (as_bool(logical_eq(alpha_fixed, 0))) {
                current_statement_begin__ = 186;
                if (as_bool(logical_lt(model_num, 4))) {
                    current_statement_begin__ = 187;
                    stan::math::assign(alpha_individual_1, inv(add(1, stan::math::exp(minus(col(beta, RP_a))))));
                    current_statement_begin__ = 188;
                    if (as_bool(logical_eq(model_num, 1))) {
                        current_statement_begin__ = 189;
                        stan::math::assign(alpha_individual_j, rep_matrix(0, I, J));
                    } else if (as_bool(logical_eq(model_num, 2))) {
                        current_statement_begin__ = 191;
                        stan::math::assign(alpha_individual_j, inv(add(1, stan::math::exp(minus(block(beta, 1, (RP_a + 1), I, J))))));
                    } else {
                        current_statement_begin__ = 193;
                        stan::math::assign(alpha_individual_j, rep_matrix(alpha_individual_1, J));
                    }
                } else {
                    current_statement_begin__ = 195;
                    stan::math::assign(alpha_individual_1, rep_vector(1e-03, I));
                    current_statement_begin__ = 196;
                    stan::math::assign(alpha_individual_j, rep_matrix(1e-03, I, J));
                }
            } else if (as_bool(logical_eq(alpha_fixed, 1))) {
                current_statement_begin__ = 199;
                stan::math::assign(alpha_full, alpha_ll(alpha, I, J, model_num, pstream__));
                current_statement_begin__ = 200;
                stan::math::assign(alpha_individual_1, col(alpha_full, 1));
                current_statement_begin__ = 201;
                stan::math::assign(alpha_individual_j, block(alpha_full, 1, 2, I, J));
            }
            current_statement_begin__ = 204;
            if (as_bool(logical_eq(gamma_fixed, 0))) {
                current_statement_begin__ = 205;
                if (as_bool(logical_eq(model_num, 2))) {
                    current_statement_begin__ = 206;
                    stan::math::assign(gamma_individual, rep_matrix(1, I, J));
                } else {
                    current_statement_begin__ = 208;
                    stan::math::assign(gamma_individual, stan::math::exp(block(beta, 1, RP_g, I, J)));
                }
            } else if (as_bool(logical_eq(gamma_fixed, 1))) {
                current_statement_begin__ = 210;
                stan::math::assign(gamma_individual, gamma_ll(gamma, I, J, model_num, pstream__));
            }
            current_statement_begin__ = 213;
            stan::math::assign(psi_individual, block(beta, 1, 1, I, NPsi));
            current_statement_begin__ = 215;
            for (int t = 1; t <= I; ++t) {
                {
                current_statement_begin__ = 216;
                validate_non_negative_index("util", "J", J);
                Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> util(J);
                stan::math::initialize(util, DUMMY_VAR__);
                stan::math::fill(util, DUMMY_VAR__);
                current_statement_begin__ = 217;
                stan::math::assign(util, multiply(get_base1(psi_individual, get_base1(task_individual, t, "task_individual", 1), "psi_individual", 1), transpose(stan::model::rvalue(dat_psi, stan::model::cons_list(stan::model::index_min_max(get_base1(start, t, "start", 1), get_base1(end, t, "end", 1)), stan::model::nil_index_list()), "dat_psi"))));
                current_statement_begin__ = 218;
                stan::model::assign(lpsi, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            util, 
                            "assigning variable lpsi");
                }
            }
            current_statement_begin__ = 221;
            stan::math::assign(log_like, mdcev_ll(quant_j, price_j, log_num, log_inc, M, log_M_fact, lpsi, gamma_individual, alpha_individual_1, alpha_individual_j, scale_full, I, J, nonzero, trunc_data, pstream__));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 164;
            check_greater_or_equal(function__, "tau", tau, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t log_like_j_1_max__ = I;
                for (size_t j_1__ = 0; j_1__ < log_like_j_1_max__; ++j_1__) {
                    vars__.push_back(log_like(j_1__));
                }
                size_t tau_j_1_max__ = RP;
                for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                    vars__.push_back(tau(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 242;
            double sum_log_lik;
            (void) sum_log_lik;  // dummy to suppress unused var warning
            stan::math::initialize(sum_log_lik, DUMMY_VAR__);
            stan::math::fill(sum_log_lik, DUMMY_VAR__);
            stan::math::assign(sum_log_lik,0);
            // generated quantities statements
            current_statement_begin__ = 254;
            for (int i = 1; i <= I; ++i) {
                current_statement_begin__ = 255;
                stan::math::assign(sum_log_lik, (sum_log_lik + get_base1(log_like, i, "log_like", 1)));
            }
            // validate, write generated quantities
            current_statement_begin__ = 242;
            check_less_or_equal(function__, "sum_log_lik", sum_log_lik, 0);
            vars__.push_back(sum_log_lik);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_mdcev_rp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t gamma_j_1_max__ = (logical_eq(gamma_fixed, 1) ? Gamma : 0 );
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = (logical_eq(alpha_fixed, 1) ? A : 0 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_j_1_max__ = RP;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_j_2_max__ = RP;
        size_t z_j_1_max__ = I;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_j_2_max__ = (logical_eq(corr, 1) ? RP : 0 );
        size_t L_Omega_j_1_max__ = (logical_eq(corr, 1) ? RP : 0 );
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_unif_j_1_max__ = RP;
        for (size_t j_1__ = 0; j_1__ < tau_unif_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_unif" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t scale_j_1_max__ = (logical_eq(fixed_scale1, 0) ? 1 : 0 );
        for (size_t j_1__ = 0; j_1__ < scale_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "scale" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t log_like_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < log_like_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_like" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t tau_j_1_max__ = RP;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sum_log_lik";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t gamma_j_1_max__ = (logical_eq(gamma_fixed, 1) ? Gamma : 0 );
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = (logical_eq(alpha_fixed, 1) ? A : 0 );
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mu_j_1_max__ = RP;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_j_2_max__ = RP;
        size_t z_j_1_max__ = I;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_j_1_max__ = (((logical_eq(corr, 1) ? RP : 0 ) * ((logical_eq(corr, 1) ? RP : 0 ) - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_unif_j_1_max__ = RP;
        for (size_t j_1__ = 0; j_1__ < tau_unif_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_unif" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t scale_j_1_max__ = (logical_eq(fixed_scale1, 0) ? 1 : 0 );
        for (size_t j_1__ = 0; j_1__ < scale_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "scale" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t log_like_j_1_max__ = I;
            for (size_t j_1__ = 0; j_1__ < log_like_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_like" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t tau_j_1_max__ = RP;
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sum_log_lik";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_mdcev_rp_namespace::model_mdcev_rp stan_model;
#endif
