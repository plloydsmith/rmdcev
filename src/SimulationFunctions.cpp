// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/mat/fun/Eigen.hpp>
#include <boost/integer/integer_log2.hpp>
// REMOVED #include <exporter.h> by dev-cpp.R 
#include <RcppEigen.h>
// Code generated by Stan version 2.21.0
#include <stan/model/standalone_functions_header.hpp>
namespace user_568f9190b415d08797081b11c764945a { 
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using namespace stan::math;
typedef Eigen::Matrix<double, Eigen::Dynamic, 1> vector_d;
typedef Eigen::Matrix<double, 1, Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> matrix_d;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "unknown file name");
    reader.add_event(660, 658, "end", "unknown file name");
    return reader;
}
template <typename T0__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
Shuffle_rng(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& inv_temp,
                const int& nerrs, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        validate_non_negative_index("out", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> out(nerrs);
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out, DUMMY_VAR__);
        current_statement_begin__ = 7;
        validate_non_negative_index("temp1", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp1(nerrs);
        stan::math::initialize(temp1, DUMMY_VAR__);
        stan::math::fill(temp1, DUMMY_VAR__);
        stan::math::assign(temp1,to_vector(uniform_rng(rep_vector(0, nerrs), 1, base_rng__)));
        current_statement_begin__ = 8;
        stan::math::assign(out, stan::model::rvalue(inv_temp, stan::model::cons_list(stan::model::index_multi(sort_indices_asc(temp1)), stan::model::nil_index_list()), "inv_temp"));
        current_statement_begin__ = 10;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct Shuffle_rng_functor__ {
    template <typename T0__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& inv_temp,
                const int& nerrs, RNG& base_rng__, std::ostream* pstream__) const {
        return Shuffle_rng(inv_temp, nerrs, base_rng__, pstream__);
    }
};
template <class RNG>
Eigen::Matrix<double, Eigen::Dynamic, 1>
DrawMlhs_rng(const int& nerrs,
                 const int& draw_mlhs, RNG& base_rng__, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 19;
        validate_non_negative_index("error", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> error(nerrs);
        stan::math::initialize(error, DUMMY_VAR__);
        stan::math::fill(error, DUMMY_VAR__);
        current_statement_begin__ = 20;
        validate_non_negative_index("temp0", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp0(nerrs);
        stan::math::initialize(temp0, DUMMY_VAR__);
        stan::math::fill(temp0, DUMMY_VAR__);
        stan::math::assign(temp0,rep_vector(0, nerrs));
        current_statement_begin__ = 22;
        if (as_bool(logical_eq(draw_mlhs, 0))) {
            current_statement_begin__ = 23;
            stan::math::assign(error, to_vector(uniform_rng(temp0, 1, base_rng__)));
        } else if (as_bool(logical_eq(draw_mlhs, 1))) {
            {
            current_statement_begin__ = 25;
            validate_non_negative_index("temp1", "nerrs", nerrs);
            std::vector<int  > temp1(nerrs, int(0));
            stan::math::fill(temp1, std::numeric_limits<int>::min());
            current_statement_begin__ = 26;
            validate_non_negative_index("temp", "nerrs", nerrs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp(nerrs);
            stan::math::initialize(temp, DUMMY_VAR__);
            stan::math::fill(temp, DUMMY_VAR__);
            current_statement_begin__ = 28;
            for (int err = 1; err <= nerrs; ++err) {
                current_statement_begin__ = 29;
                stan::model::assign(temp1, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                            (err - 1), 
                            "assigning variable temp1");
            }
            current_statement_begin__ = 31;
            stan::math::assign(temp, divide(to_vector(temp1), nerrs));
            current_statement_begin__ = 32;
            stan::math::assign(error, Shuffle_rng(add(temp, divide(to_vector(uniform_rng(temp0, 1, base_rng__)), nerrs)), nerrs, base_rng__, pstream__));
            }
        }
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(error);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct DrawMlhs_rng_functor__ {
    template <class RNG>
        Eigen::Matrix<double, Eigen::Dynamic, 1>
    operator()(const int& nerrs,
                 const int& draw_mlhs, RNG& base_rng__, std::ostream* pstream__) const {
        return DrawMlhs_rng(nerrs, draw_mlhs, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, class RNG>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic, 1> >
DrawError_rng(const T0__& quant_num,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& quant_j,
                  const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& price_j,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& psi_j,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& phi_j,
                  const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& gamma_j,
                  const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& alpha,
                  const T7__& scale,
                  const int& model_num,
                  const int& nalts,
                  const int& nerrs,
                  const int& cond_error,
                  const int& draw_mlhs, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 41;
        validate_non_negative_index("out", "(nalts + 1)", (nalts + 1));
        validate_non_negative_index("out", "nerrs", nerrs);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > out(nerrs, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((nalts + 1)));
        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out, DUMMY_VAR__);
        current_statement_begin__ = 42;
        validate_non_negative_index("error", "nerrs", nerrs);
        validate_non_negative_index("error", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> error(nerrs, (nalts + 1));
        stan::math::initialize(error, DUMMY_VAR__);
        stan::math::fill(error, DUMMY_VAR__);
        current_statement_begin__ = 44;
        if (as_bool(logical_eq(cond_error, 0))) {
            current_statement_begin__ = 46;
            for (int j = 1; j <= (nalts + 1); ++j) {
                current_statement_begin__ = 47;
                stan::model::assign(error, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            multiply(minus(stan::math::log(minus(stan::math::log(DrawMlhs_rng(nerrs, draw_mlhs, base_rng__, pstream__))))), scale), 
                            "assigning variable error");
            }
        } else if (as_bool(logical_eq(cond_error, 1))) {
            {
            current_statement_begin__ = 51;
            validate_non_negative_index("cond_demand", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cond_demand((nalts + 1));
            stan::math::initialize(cond_demand, DUMMY_VAR__);
            stan::math::fill(cond_demand, DUMMY_VAR__);
            stan::math::assign(cond_demand,append_row(quant_num, quant_j));
            current_statement_begin__ = 52;
            validate_non_negative_index("ek", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ek((nalts + 1));
            stan::math::initialize(ek, DUMMY_VAR__);
            stan::math::fill(ek, DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("vk", "nalts", nalts);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> vk(nalts);
            stan::math::initialize(vk, DUMMY_VAR__);
            stan::math::fill(vk, DUMMY_VAR__);
            current_statement_begin__ = 54;
            local_scalar_t__ v1(DUMMY_VAR__);
            (void) v1;  // dummy to suppress unused var warning
            stan::math::initialize(v1, DUMMY_VAR__);
            stan::math::fill(v1, DUMMY_VAR__);
            stan::math::assign(v1,((get_base1(alpha, 1, "alpha", 1) - 1) * stan::math::log(quant_num)));
            current_statement_begin__ = 56;
            if (as_bool(logical_neq(model_num, 5))) {
                current_statement_begin__ = 57;
                stan::math::assign(vk, subtract(add(psi_j, elt_multiply(subtract(stan::model::rvalue(alpha, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "alpha"), 1), stan::math::log(add(elt_divide(quant_j, gamma_j), 1)))), stan::math::log(price_j)));
            } else if (as_bool(logical_eq(model_num, 5))) {
                current_statement_begin__ = 59;
                stan::math::assign(vk, subtract(add(subtract(psi_j, stan::math::log(add(elt_multiply(phi_j, quant_j), gamma_j))), stan::math::log(phi_j)), stan::math::log(price_j)));
            }
            current_statement_begin__ = 61;
            stan::math::assign(ek, append_row(0, divide(subtract(v1, vk), scale)));
            current_statement_begin__ = 64;
            for (int j = 1; j <= (nalts + 1); ++j) {
                current_statement_begin__ = 65;
                stan::model::assign(error, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (logical_gt(get_base1(cond_demand, j, "cond_demand", 1), 0) ? stan::math::promote_scalar<local_scalar_t__>(rep_vector((get_base1(ek, j, "ek", 1) * scale), nerrs)) : stan::math::promote_scalar<local_scalar_t__>(multiply(minus(stan::math::log(minus(stan::math::log(multiply(DrawMlhs_rng(nerrs, draw_mlhs, base_rng__, pstream__), stan::math::exp(-(stan::math::exp(-(get_base1(ek, j, "ek", 1)))))))))), scale)) ), 
                            "assigning variable error");
            }
            }
        }
        current_statement_begin__ = 69;
        for (int err = 1; err <= nerrs; ++err) {
            current_statement_begin__ = 70;
            stan::model::assign(out, 
                        stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                        transpose(get_base1(error, err, "error", 1)), 
                        "assigning variable out");
        }
        current_statement_begin__ = 71;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct DrawError_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, class RNG>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic, 1> >
    operator()(const T0__& quant_num,
                  const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& quant_j,
                  const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& price_j,
                  const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& psi_j,
                  const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& phi_j,
                  const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& gamma_j,
                  const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& alpha,
                  const T7__& scale,
                  const int& model_num,
                  const int& nalts,
                  const int& nerrs,
                  const int& cond_error,
                  const int& draw_mlhs, RNG& base_rng__, std::ostream* pstream__) const {
        return DrawError_rng(quant_num, quant_j, price_j, psi_j, phi_j, gamma_j, alpha, scale, model_num, nalts, nerrs, cond_error, draw_mlhs, base_rng__, pstream__);
    }
};
template <typename T0__>
std::vector<int>
CalcAltOrder(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& MUzero,
                 const int& nalts, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 80;
        validate_non_negative_index("order_x", "(nalts + 1)", (nalts + 1));
        std::vector<int  > order_x((nalts + 1), int(0));
        stan::math::fill(order_x, std::numeric_limits<int>::min());
        current_statement_begin__ = 81;
        validate_non_negative_index("ord_alts", "nalts", nalts);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ord_alts(nalts);
        stan::math::initialize(ord_alts, DUMMY_VAR__);
        stan::math::fill(ord_alts, DUMMY_VAR__);
        current_statement_begin__ = 82;
        validate_non_negative_index("order_MU", "nalts", nalts);
        std::vector<int  > order_MU(nalts, int(0));
        stan::math::fill(order_MU, std::numeric_limits<int>::min());
        stan::math::assign(order_MU,sort_indices_desc(stan::model::rvalue(MUzero, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "MUzero")));
        current_statement_begin__ = 84;
        for (int j = 1; j <= nalts; ++j) {
            current_statement_begin__ = 85;
            stan::model::assign(ord_alts, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        j, 
                        "assigning variable ord_alts");
        }
        current_statement_begin__ = 87;
        stan::math::assign(order_x, sort_indices_asc(append_row(1.0, to_vector(add(stan::model::rvalue(ord_alts, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "ord_alts"), 1)))));
        current_statement_begin__ = 88;
        return stan::math::promote_scalar<fun_return_scalar_t__>(order_x);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct CalcAltOrder_functor__ {
    template <typename T0__>
        std::vector<int>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& MUzero,
                 const int& nalts, std::ostream* pstream__) const {
        return CalcAltOrder(MUzero, nalts, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
SortParmMatrix(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& MUzero,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& price,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& gamma,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& alpha_phi,
                   const int& nalts, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 96;
        validate_non_negative_index("parm_matrix", "(nalts + 1)", (nalts + 1));
        validate_non_negative_index("parm_matrix", "4", 4);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> parm_matrix((nalts + 1), 4);
        stan::math::initialize(parm_matrix, DUMMY_VAR__);
        stan::math::fill(parm_matrix, DUMMY_VAR__);
        current_statement_begin__ = 97;
        validate_non_negative_index("MU_j", "nalts", nalts);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> MU_j(nalts);
        stan::math::initialize(MU_j, DUMMY_VAR__);
        stan::math::fill(MU_j, DUMMY_VAR__);
        stan::math::assign(MU_j,stan::model::rvalue(MUzero, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "MUzero"));
        current_statement_begin__ = 98;
        validate_non_negative_index("price_j", "nalts", nalts);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> price_j(nalts);
        stan::math::initialize(price_j, DUMMY_VAR__);
        stan::math::fill(price_j, DUMMY_VAR__);
        stan::math::assign(price_j,stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "price"));
        current_statement_begin__ = 99;
        validate_non_negative_index("gamma_j", "nalts", nalts);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_j(nalts);
        stan::math::initialize(gamma_j, DUMMY_VAR__);
        stan::math::fill(gamma_j, DUMMY_VAR__);
        stan::math::assign(gamma_j,stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "gamma"));
        current_statement_begin__ = 100;
        validate_non_negative_index("alpha_phi_j", "nalts", nalts);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_phi_j(nalts);
        stan::math::initialize(alpha_phi_j, DUMMY_VAR__);
        stan::math::fill(alpha_phi_j, DUMMY_VAR__);
        stan::math::assign(alpha_phi_j,stan::model::rvalue(alpha_phi, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "alpha_phi"));
        current_statement_begin__ = 101;
        validate_non_negative_index("order_MU", "nalts", nalts);
        std::vector<int  > order_MU(nalts, int(0));
        stan::math::fill(order_MU, std::numeric_limits<int>::min());
        stan::math::assign(order_MU,sort_indices_desc(MU_j));
        current_statement_begin__ = 103;
        stan::math::assign(parm_matrix, append_col(append_row(get_base1(MUzero, 1, "MUzero", 1), stan::model::rvalue(MU_j, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "MU_j")), append_col(append_row(get_base1(price, 1, "price", 1), stan::model::rvalue(price_j, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "price_j")), append_col(append_row(get_base1(gamma, 1, "gamma", 1), stan::model::rvalue(gamma_j, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "gamma_j")), append_row(get_base1(alpha_phi, 1, "alpha_phi", 1), stan::model::rvalue(alpha_phi_j, stan::model::cons_list(stan::model::index_multi(order_MU), stan::model::nil_index_list()), "alpha_phi_j"))))));
        current_statement_begin__ = 106;
        return stan::math::promote_scalar<fun_return_scalar_t__>(parm_matrix);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct SortParmMatrix_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& MUzero,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& price,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& gamma,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& alpha_phi,
                   const int& nalts, std::ostream* pstream__) const {
        return SortParmMatrix(MUzero, price, gamma, alpha_phi, nalts, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type
ComputeE(const int& M,
             const T1__& lambda,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& g_price__phi,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& b,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& c,
             const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& d, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 110;
        local_scalar_t__ output(DUMMY_VAR__);
        (void) output;  // dummy to suppress unused var warning
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        current_statement_begin__ = 111;
        validate_non_negative_index("temp", "M", M);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp(M);
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        current_statement_begin__ = 112;
        for (int m = 1; m <= M; ++m) {
            current_statement_begin__ = 113;
            stan::model::assign(temp, 
                        stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                        (get_base1(g_price__phi, m, "g_price__phi", 1) * ((pow(lambda, get_base1(b, m, "b", 1)) / get_base1(c, m, "c", 1)) - get_base1(d, m, "d", 1))), 
                        "assigning variable temp");
        }
        current_statement_begin__ = 114;
        stan::math::assign(output, sum(temp));
        current_statement_begin__ = 115;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ComputeE_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type
    operator()(const int& M,
             const T1__& lambda,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& g_price__phi,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& b,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& c,
             const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& d, std::ostream* pstream__) const {
        return ComputeE(M, lambda, g_price__phi, b, c, d, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T9__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T9__>::type>::type, Eigen::Dynamic, 1>
MarshallianDemand(const T0__& income,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& price,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& MUzero,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& phi,
                      const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& gamma,
                      const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& alpha,
                      const int& nalts,
                      const int& algo_gen,
                      const int& model_num,
                      const T9__& tol_e,
                      const int& max_loop, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T9__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 125;
        validate_non_negative_index("mdemand", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mdemand((nalts + 1));
        stan::math::initialize(mdemand, DUMMY_VAR__);
        stan::math::fill(mdemand, DUMMY_VAR__);
        current_statement_begin__ = 126;
        local_scalar_t__ lambda(DUMMY_VAR__);
        (void) lambda;  // dummy to suppress unused var warning
        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda, DUMMY_VAR__);
        current_statement_begin__ = 127;
        int M(0);
        (void) M;  // dummy to suppress unused var warning
        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,1);
        current_statement_begin__ = 128;
        int exit(0);
        (void) exit;  // dummy to suppress unused var warning
        stan::math::fill(exit, std::numeric_limits<int>::min());
        stan::math::assign(exit,0);
        current_statement_begin__ = 129;
        local_scalar_t__ E(DUMMY_VAR__);
        (void) E;  // dummy to suppress unused var warning
        stan::math::initialize(E, DUMMY_VAR__);
        stan::math::fill(E, DUMMY_VAR__);
        current_statement_begin__ = 130;
        validate_non_negative_index("order_x", "(nalts + 1)", (nalts + 1));
        std::vector<int  > order_x((nalts + 1), int(0));
        stan::math::fill(order_x, std::numeric_limits<int>::min());
        stan::math::assign(order_x,CalcAltOrder(MUzero, nalts, pstream__));
        current_statement_begin__ = 131;
        validate_non_negative_index("X", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X((nalts + 1));
        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X, DUMMY_VAR__);
        stan::math::assign(X,rep_vector(0, (nalts + 1)));
        current_statement_begin__ = 132;
        validate_non_negative_index("d", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> d((nalts + 1));
        stan::math::initialize(d, DUMMY_VAR__);
        stan::math::fill(d, DUMMY_VAR__);
        stan::math::assign(d,append_row(0, rep_vector(1, nalts)));
        current_statement_begin__ = 134;
        if (as_bool(logical_eq(algo_gen, 0))) {
            {
            current_statement_begin__ = 135;
            validate_non_negative_index("parm_matrix", "(nalts + 1)", (nalts + 1));
            validate_non_negative_index("parm_matrix", "4", 4);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> parm_matrix((nalts + 1), 4);
            stan::math::initialize(parm_matrix, DUMMY_VAR__);
            stan::math::fill(parm_matrix, DUMMY_VAR__);
            stan::math::assign(parm_matrix,SortParmMatrix(MUzero, price, gamma, alpha, nalts, pstream__));
            current_statement_begin__ = 136;
            validate_non_negative_index("mu", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu((nalts + 1));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,col(parm_matrix, 1));
            current_statement_begin__ = 137;
            validate_non_negative_index("g", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> g((nalts + 1));
            stan::math::initialize(g, DUMMY_VAR__);
            stan::math::fill(g, DUMMY_VAR__);
            stan::math::assign(g,col(parm_matrix, 3));
            current_statement_begin__ = 138;
            validate_non_negative_index("g_price", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> g_price((nalts + 1));
            stan::math::initialize(g_price, DUMMY_VAR__);
            stan::math::fill(g_price, DUMMY_VAR__);
            stan::math::assign(g_price,elt_multiply(g, col(parm_matrix, 2)));
            current_statement_begin__ = 139;
            local_scalar_t__ alpha_1(DUMMY_VAR__);
            (void) alpha_1;  // dummy to suppress unused var warning
            stan::math::initialize(alpha_1, DUMMY_VAR__);
            stan::math::fill(alpha_1, DUMMY_VAR__);
            stan::math::assign(alpha_1,get_base1(alpha, 1, "alpha", 1));
            current_statement_begin__ = 140;
            validate_non_negative_index("b", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b((nalts + 1));
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 142;
            for (int j = 1; j <= (nalts + 1); ++j) {
                current_statement_begin__ = 143;
                stan::model::assign(b, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(g_price, j, "g_price", 1) * pow(get_base1(mu, j, "mu", 1), inv((1 - alpha_1)))), 
                            "assigning variable b");
            }
            current_statement_begin__ = 145;
            while (as_bool(logical_eq(exit, 0))) {
                {
                current_statement_begin__ = 147;
                local_scalar_t__ lambda_num(DUMMY_VAR__);
                (void) lambda_num;  // dummy to suppress unused var warning
                stan::math::initialize(lambda_num, DUMMY_VAR__);
                stan::math::fill(lambda_num, DUMMY_VAR__);
                stan::math::assign(lambda_num,((income + sum(stan::model::rvalue(g_price, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "g_price"))) - 1));
                current_statement_begin__ = 148;
                local_scalar_t__ lambda_den(DUMMY_VAR__);
                (void) lambda_den;  // dummy to suppress unused var warning
                stan::math::initialize(lambda_den, DUMMY_VAR__);
                stan::math::fill(lambda_den, DUMMY_VAR__);
                stan::math::assign(lambda_den,sum(stan::model::rvalue(b, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "b")));
                current_statement_begin__ = 149;
                stan::math::assign(lambda, pow((lambda_num / lambda_den), (alpha_1 - 1)));
                current_statement_begin__ = 154;
                if (as_bool((primitive_value(logical_gt(lambda, get_base1(mu, std::min((M + 1), (nalts + 1)), "mu", 1))) || primitive_value(logical_eq(M, (nalts + 1)))))) {
                    current_statement_begin__ = 156;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 157;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    ((pow((lambda / get_base1(mu, m, "mu", 1)), inv((alpha_1 - 1))) - get_base1(d, m, "d", 1)) * get_base1(g, m, "g", 1)), 
                                    "assigning variable X");
                    }
                    current_statement_begin__ = 158;
                    stan::math::assign(exit, 1);
                } else if (as_bool(logical_lt(M, (nalts + 1)))) {
                    current_statement_begin__ = 161;
                    stan::math::assign(M, (M + 1));
                }
                }
            }
            }
        } else if (as_bool(logical_eq(algo_gen, 1))) {
            {
            current_statement_begin__ = 165;
            local_scalar_t__ lambda_l(DUMMY_VAR__);
            (void) lambda_l;  // dummy to suppress unused var warning
            stan::math::initialize(lambda_l, DUMMY_VAR__);
            stan::math::fill(lambda_l, DUMMY_VAR__);
            current_statement_begin__ = 166;
            local_scalar_t__ lambda_u(DUMMY_VAR__);
            (void) lambda_u;  // dummy to suppress unused var warning
            stan::math::initialize(lambda_u, DUMMY_VAR__);
            stan::math::fill(lambda_u, DUMMY_VAR__);
            current_statement_begin__ = 167;
            validate_non_negative_index("parm_matrix", "(nalts + 1)", (nalts + 1));
            validate_non_negative_index("parm_matrix", "4", 4);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> parm_matrix((nalts + 1), 4);
            stan::math::initialize(parm_matrix, DUMMY_VAR__);
            stan::math::fill(parm_matrix, DUMMY_VAR__);
            current_statement_begin__ = 168;
            validate_non_negative_index("mu", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu((nalts + 1));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 169;
            validate_non_negative_index("c", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> c((nalts + 1));
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            current_statement_begin__ = 170;
            validate_non_negative_index("b", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b((nalts + 1));
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 171;
            validate_non_negative_index("g__phi", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> g__phi((nalts + 1));
            stan::math::initialize(g__phi, DUMMY_VAR__);
            stan::math::fill(g__phi, DUMMY_VAR__);
            current_statement_begin__ = 172;
            validate_non_negative_index("g_price__phi", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> g_price__phi((nalts + 1));
            stan::math::initialize(g_price__phi, DUMMY_VAR__);
            stan::math::fill(g_price__phi, DUMMY_VAR__);
            current_statement_begin__ = 174;
            if (as_bool(logical_lt(model_num, 5))) {
                current_statement_begin__ = 175;
                stan::math::assign(parm_matrix, SortParmMatrix(MUzero, price, gamma, alpha, nalts, pstream__));
                current_statement_begin__ = 176;
                stan::math::assign(b, inv(subtract(col(parm_matrix, 4), 1)));
                current_statement_begin__ = 177;
                stan::math::assign(g__phi, col(parm_matrix, 3));
            } else if (as_bool(logical_eq(model_num, 5))) {
                current_statement_begin__ = 180;
                stan::math::assign(parm_matrix, SortParmMatrix(MUzero, price, gamma, phi, nalts, pstream__));
                current_statement_begin__ = 181;
                stan::math::assign(b, inv(subtract(alpha, 1)));
                current_statement_begin__ = 182;
                stan::math::assign(g__phi, elt_divide(col(parm_matrix, 3), col(parm_matrix, 4)));
            }
            current_statement_begin__ = 185;
            stan::math::assign(mu, col(parm_matrix, 1));
            current_statement_begin__ = 186;
            stan::math::assign(g_price__phi, elt_multiply(g__phi, col(parm_matrix, 2)));
            current_statement_begin__ = 188;
            for (int j = 1; j <= (nalts + 1); ++j) {
                current_statement_begin__ = 189;
                stan::model::assign(c, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            pow(get_base1(mu, j, "mu", 1), get_base1(b, j, "b", 1)), 
                            "assigning variable c");
            }
            current_statement_begin__ = 191;
            while (as_bool(logical_eq(exit, 0))) {
                current_statement_begin__ = 192;
                stan::math::assign(lambda, get_base1(mu, (M + 1), "mu", 1));
                current_statement_begin__ = 194;
                stan::math::assign(E, ComputeE(M, lambda, g_price__phi, b, c, d, pstream__));
                current_statement_begin__ = 196;
                if (as_bool((primitive_value(logical_gte(E, income)) || primitive_value(logical_eq((M + 1), (nalts + 1)))))) {
                    current_statement_begin__ = 197;
                    if (as_bool(logical_lt(E, income))) {
                        current_statement_begin__ = 198;
                        stan::math::assign(M, (M + 1));
                    }
                    current_statement_begin__ = 200;
                    stan::math::assign(lambda_l, (logical_lt(E, income) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(lambda) ));
                    current_statement_begin__ = 201;
                    stan::math::assign(lambda_u, get_base1(mu, M, "mu", 1));
                    current_statement_begin__ = 202;
                    stan::math::assign(lambda, ((lambda_l + lambda_u) / 2));
                    current_statement_begin__ = 204;
                    for (int n = 1; n <= max_loop; ++n) {
                        {
                        current_statement_begin__ = 205;
                        local_scalar_t__ lambda_mid(DUMMY_VAR__);
                        (void) lambda_mid;  // dummy to suppress unused var warning
                        stan::math::initialize(lambda_mid, DUMMY_VAR__);
                        stan::math::fill(lambda_mid, DUMMY_VAR__);
                        stan::math::assign(lambda_mid,((lambda_l + lambda_u) / 2));
                        current_statement_begin__ = 207;
                        stan::math::assign(E, ComputeE(M, lambda, g_price__phi, b, c, d, pstream__));
                        current_statement_begin__ = 210;
                        if (as_bool(logical_lt(E, income))) {
                            current_statement_begin__ = 211;
                            stan::math::assign(lambda_u, lambda_mid);
                        } else if (as_bool(logical_gt(E, income))) {
                            current_statement_begin__ = 213;
                            stan::math::assign(lambda_l, lambda_mid);
                        }
                        current_statement_begin__ = 215;
                        stan::math::assign(lambda, ((lambda_l + lambda_u) / 2));
                        current_statement_begin__ = 217;
                        if (as_bool(logical_lt(stan::math::fabs((((E - income) / (E + income)) * 0.5)), tol_e))) {
                            current_statement_begin__ = 217;
                            break;
                        }
                        }
                    }
                    current_statement_begin__ = 220;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 221;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    ((pow((lambda / get_base1(mu, m, "mu", 1)), get_base1(b, m, "b", 1)) - get_base1(d, m, "d", 1)) * get_base1(g__phi, m, "g__phi", 1)), 
                                    "assigning variable X");
                    }
                    current_statement_begin__ = 223;
                    stan::math::assign(exit, 1);
                } else if (as_bool((primitive_value(logical_lt(E, income)) && primitive_value(logical_lt((M + 1), (nalts + 1)))))) {
                    current_statement_begin__ = 226;
                    stan::math::assign(M, (M + 1));
                }
            }
            }
        }
        current_statement_begin__ = 230;
        stan::math::assign(mdemand, stan::model::rvalue(X, stan::model::cons_list(stan::model::index_multi(order_x), stan::model::nil_index_list()), "X"));
        current_statement_begin__ = 231;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mdemand);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct MarshallianDemand_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T9__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T9__>::type>::type, Eigen::Dynamic, 1>
    operator()(const T0__& income,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& price,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& MUzero,
                      const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& phi,
                      const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& gamma,
                      const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& alpha,
                      const int& nalts,
                      const int& algo_gen,
                      const int& model_num,
                      const T9__& tol_e,
                      const int& max_loop, std::ostream* pstream__) const {
        return MarshallianDemand(income, price, MUzero, phi, gamma, alpha, nalts, algo_gen, model_num, tol_e, max_loop, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type
ComputeUtilJ(const T0__& income,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& quant_j,
                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& price_j,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& psi,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& phi_j,
                 const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& gamma_j,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& alpha,
                 const int& nalts,
                 const int& model_num, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 241;
        local_scalar_t__ output(DUMMY_VAR__);
        (void) output;  // dummy to suppress unused var warning
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        current_statement_begin__ = 242;
        local_scalar_t__ util_num(DUMMY_VAR__);
        (void) util_num;  // dummy to suppress unused var warning
        stan::math::initialize(util_num, DUMMY_VAR__);
        stan::math::fill(util_num, DUMMY_VAR__);
        current_statement_begin__ = 243;
        validate_non_negative_index("util_j", "nalts", nalts);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> util_j(nalts);
        stan::math::initialize(util_j, DUMMY_VAR__);
        stan::math::fill(util_j, DUMMY_VAR__);
        current_statement_begin__ = 245;
        if (as_bool(logical_eq(model_num, 4))) {
            current_statement_begin__ = 246;
            stan::math::assign(util_num, (get_base1(psi, 1, "psi", 1) * stan::math::log((income - multiply(transpose(price_j), quant_j)))));
        } else {
            current_statement_begin__ = 248;
            stan::math::assign(util_num, ((get_base1(psi, 1, "psi", 1) * pow((income - multiply(transpose(price_j), quant_j)), get_base1(alpha, 1, "alpha", 1))) / get_base1(alpha, 1, "alpha", 1)));
        }
        current_statement_begin__ = 250;
        if (as_bool((primitive_value(logical_eq(model_num, 1)) || primitive_value(logical_eq(model_num, 4))))) {
            current_statement_begin__ = 251;
            stan::math::assign(util_j, elt_multiply(elt_multiply(stan::model::rvalue(psi, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "psi"), gamma_j), stan::math::log(add(elt_divide(quant_j, gamma_j), 1))));
        } else if (as_bool(logical_eq(model_num, 5))) {
            current_statement_begin__ = 253;
            stan::math::assign(util_j, elt_multiply(stan::model::rvalue(psi, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "psi"), stan::math::log(add(elt_divide(elt_multiply(phi_j, quant_j), gamma_j), 1))));
        } else {
            current_statement_begin__ = 255;
            for (int n = 1; n <= nalts; ++n) {
                current_statement_begin__ = 256;
                stan::model::assign(util_j, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (((get_base1(psi, (n + 1), "psi", 1) * get_base1(gamma_j, n, "gamma_j", 1)) / get_base1(alpha, (n + 1), "alpha", 1)) * (pow(((get_base1(quant_j, n, "quant_j", 1) / get_base1(gamma_j, n, "gamma_j", 1)) + 1), get_base1(alpha, (n + 1), "alpha", 1)) - 1)), 
                            "assigning variable util_j");
            }
        }
        current_statement_begin__ = 260;
        stan::math::assign(output, (util_num + sum(util_j)));
        current_statement_begin__ = 261;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ComputeUtilJ_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__>::type>::type
    operator()(const T0__& income,
                 const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& quant_j,
                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& price_j,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& psi,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& phi_j,
                 const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& gamma_j,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& alpha,
                 const int& nalts,
                 const int& model_num, std::ostream* pstream__) const {
        return ComputeUtilJ(income, quant_j, price_j, psi, phi_j, gamma_j, alpha, nalts, model_num, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type
ComputeUtilM(const int& M,
                 const T1__& lambda1,
                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& g_psi_a,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& a_a_1,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& mu_a_a_1,
                 const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& psi,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& g,
                 const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& price,
                 const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& d,
                 const int& model_num, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 270;
        local_scalar_t__ output(DUMMY_VAR__);
        (void) output;  // dummy to suppress unused var warning
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        current_statement_begin__ = 271;
        validate_non_negative_index("temp", "M", M);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp(M);
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        stan::math::assign(temp,rep_vector(0, M));
        current_statement_begin__ = 272;
        stan::model::assign(temp, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    (get_base1(g_psi_a, 1, "g_psi_a", 1) * ((pow(lambda1, get_base1(a_a_1, 1, "a_a_1", 1)) * get_base1(mu_a_a_1, 1, "mu_a_a_1", 1)) - get_base1(d, 1, "d", 1))), 
                    "assigning variable temp");
        current_statement_begin__ = 273;
        if (as_bool(logical_gt(M, 1))) {
            current_statement_begin__ = 274;
            for (int m = 2; m <= M; ++m) {
                current_statement_begin__ = 275;
                if (as_bool(logical_eq(model_num, 1))) {
                    current_statement_begin__ = 276;
                    stan::model::assign(temp, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                ((get_base1(psi, m, "psi", 1) * get_base1(g, m, "g", 1)) * stan::math::log((get_base1(psi, m, "psi", 1) / (lambda1 * get_base1(price, m, "price", 1))))), 
                                "assigning variable temp");
                } else if (as_bool(logical_neq(model_num, 1))) {
                    current_statement_begin__ = 278;
                    stan::model::assign(temp, 
                                stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                (get_base1(g_psi_a, m, "g_psi_a", 1) * ((pow(lambda1, get_base1(a_a_1, m, "a_a_1", 1)) * get_base1(mu_a_a_1, m, "mu_a_a_1", 1)) - get_base1(d, m, "d", 1))), 
                                "assigning variable temp");
                }
            }
        }
        current_statement_begin__ = 281;
        stan::math::assign(output, sum(temp));
        current_statement_begin__ = 282;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ComputeUtilM_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__, T7__, T8__>::type>::type
    operator()(const int& M,
                 const T1__& lambda1,
                 const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& g_psi_a,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& a_a_1,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& mu_a_a_1,
                 const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& psi,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& g,
                 const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& price,
                 const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& d,
                 const int& model_num, std::ostream* pstream__) const {
        return ComputeUtilM(M, lambda1, g_psi_a, a_a_1, mu_a_a_1, psi, g, price, d, model_num, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type
ComputeKtUtilM(const int& M,
                   const T1__& lambda1,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& psi,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& mu,
                   const T4__& alpha_1, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 287;
        local_scalar_t__ output(DUMMY_VAR__);
        (void) output;  // dummy to suppress unused var warning
        stan::math::initialize(output, DUMMY_VAR__);
        stan::math::fill(output, DUMMY_VAR__);
        current_statement_begin__ = 288;
        validate_non_negative_index("temp", "M", M);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp(M);
        stan::math::initialize(temp, DUMMY_VAR__);
        stan::math::fill(temp, DUMMY_VAR__);
        stan::math::assign(temp,rep_vector(0, M));
        current_statement_begin__ = 289;
        stan::model::assign(temp, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    ((get_base1(psi, 1, "psi", 1) * pow((lambda1 / get_base1(mu, 1, "mu", 1)), (alpha_1 / (alpha_1 - 1)))) / alpha_1), 
                    "assigning variable temp");
        current_statement_begin__ = 290;
        if (as_bool(logical_gt(M, 1))) {
            current_statement_begin__ = 291;
            for (int m = 2; m <= M; ++m) {
                current_statement_begin__ = 292;
                stan::model::assign(temp, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            (get_base1(psi, m, "psi", 1) * stan::math::log((get_base1(mu, m, "mu", 1) / lambda1))), 
                            "assigning variable temp");
            }
        }
        current_statement_begin__ = 294;
        stan::math::assign(output, sum(temp));
        current_statement_begin__ = 295;
        return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ComputeKtUtilM_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type
    operator()(const int& M,
                   const T1__& lambda1,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& psi,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& mu,
                   const T4__& alpha_1, std::ostream* pstream__) const {
        return ComputeKtUtilM(M, lambda1, psi, mu, alpha_1, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T9__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T9__>::type>::type, Eigen::Dynamic, 1>
HicksianDemand(const T0__& util,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& price,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& MUzero,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& phi,
                   const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& gamma,
                   const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& alpha,
                   const int& nalts,
                   const int& algo_gen,
                   const int& model_num,
                   const T9__& tol_l,
                   const int& max_loop, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T9__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 306;
        validate_non_negative_index("hdemand", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> hdemand((nalts + 1));
        stan::math::initialize(hdemand, DUMMY_VAR__);
        stan::math::fill(hdemand, DUMMY_VAR__);
        current_statement_begin__ = 307;
        int M(0);
        (void) M;  // dummy to suppress unused var warning
        stan::math::fill(M, std::numeric_limits<int>::min());
        stan::math::assign(M,1);
        current_statement_begin__ = 308;
        int exit(0);
        (void) exit;  // dummy to suppress unused var warning
        stan::math::fill(exit, std::numeric_limits<int>::min());
        stan::math::assign(exit,0);
        current_statement_begin__ = 309;
        local_scalar_t__ lambda1(DUMMY_VAR__);
        (void) lambda1;  // dummy to suppress unused var warning
        stan::math::initialize(lambda1, DUMMY_VAR__);
        stan::math::fill(lambda1, DUMMY_VAR__);
        current_statement_begin__ = 310;
        local_scalar_t__ util_new(DUMMY_VAR__);
        (void) util_new;  // dummy to suppress unused var warning
        stan::math::initialize(util_new, DUMMY_VAR__);
        stan::math::fill(util_new, DUMMY_VAR__);
        current_statement_begin__ = 311;
        validate_non_negative_index("order_x", "(nalts + 1)", (nalts + 1));
        std::vector<int  > order_x((nalts + 1), int(0));
        stan::math::fill(order_x, std::numeric_limits<int>::min());
        stan::math::assign(order_x,CalcAltOrder(MUzero, nalts, pstream__));
        current_statement_begin__ = 312;
        validate_non_negative_index("X", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X((nalts + 1));
        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X, DUMMY_VAR__);
        stan::math::assign(X,rep_vector(0, (nalts + 1)));
        current_statement_begin__ = 313;
        validate_non_negative_index("d", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> d((nalts + 1));
        stan::math::initialize(d, DUMMY_VAR__);
        stan::math::fill(d, DUMMY_VAR__);
        stan::math::assign(d,append_row(0, rep_vector(1, nalts)));
        current_statement_begin__ = 315;
        if (as_bool(logical_eq(algo_gen, 0))) {
            {
            current_statement_begin__ = 316;
            validate_non_negative_index("parm_matrix", "(nalts + 1)", (nalts + 1));
            validate_non_negative_index("parm_matrix", "4", 4);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> parm_matrix((nalts + 1), 4);
            stan::math::initialize(parm_matrix, DUMMY_VAR__);
            stan::math::fill(parm_matrix, DUMMY_VAR__);
            stan::math::assign(parm_matrix,SortParmMatrix(MUzero, price, gamma, alpha, nalts, pstream__));
            current_statement_begin__ = 317;
            local_scalar_t__ alpha_1(DUMMY_VAR__);
            (void) alpha_1;  // dummy to suppress unused var warning
            stan::math::initialize(alpha_1, DUMMY_VAR__);
            stan::math::fill(alpha_1, DUMMY_VAR__);
            stan::math::assign(alpha_1,get_base1(alpha, 1, "alpha", 1));
            current_statement_begin__ = 318;
            validate_non_negative_index("mu", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu((nalts + 1));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,col(parm_matrix, 1));
            current_statement_begin__ = 319;
            validate_non_negative_index("g", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> g((nalts + 1));
            stan::math::initialize(g, DUMMY_VAR__);
            stan::math::fill(g, DUMMY_VAR__);
            stan::math::assign(g,col(parm_matrix, 3));
            current_statement_begin__ = 320;
            validate_non_negative_index("g_psi", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> g_psi((nalts + 1));
            stan::math::initialize(g_psi, DUMMY_VAR__);
            stan::math::fill(g_psi, DUMMY_VAR__);
            stan::math::assign(g_psi,elt_multiply(elt_multiply(g, mu), col(parm_matrix, 2)));
            current_statement_begin__ = 321;
            validate_non_negative_index("c", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> c((nalts + 1));
            stan::math::initialize(c, DUMMY_VAR__);
            stan::math::fill(c, DUMMY_VAR__);
            current_statement_begin__ = 323;
            if (as_bool(logical_eq(model_num, 3))) {
                {
                current_statement_begin__ = 324;
                validate_non_negative_index("b", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b((nalts + 1));
                stan::math::initialize(b, DUMMY_VAR__);
                stan::math::fill(b, DUMMY_VAR__);
                current_statement_begin__ = 325;
                for (int j = 1; j <= (nalts + 1); ++j) {
                    current_statement_begin__ = 326;
                    stan::model::assign(b, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                pow(get_base1(mu, j, "mu", 1), (-(alpha_1) / (alpha_1 - 1))), 
                                "assigning variable b");
                }
                current_statement_begin__ = 328;
                stan::math::assign(c, elt_multiply(g_psi, b));
                }
            } else if (as_bool(logical_eq(model_num, 4))) {
                current_statement_begin__ = 331;
                stan::math::assign(c, elt_multiply(g_psi, stan::math::log(mu)));
            }
            current_statement_begin__ = 334;
            while (as_bool(logical_eq(exit, 0))) {
                current_statement_begin__ = 336;
                if (as_bool(logical_eq(model_num, 3))) {
                    {
                    current_statement_begin__ = 337;
                    local_scalar_t__ lambda_num(DUMMY_VAR__);
                    (void) lambda_num;  // dummy to suppress unused var warning
                    stan::math::initialize(lambda_num, DUMMY_VAR__);
                    stan::math::fill(lambda_num, DUMMY_VAR__);
                    stan::math::assign(lambda_num,(((alpha_1 * util) + sum(stan::model::rvalue(g_psi, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "g_psi"))) - get_base1(g_psi, 1, "g_psi", 1)));
                    current_statement_begin__ = 338;
                    local_scalar_t__ lambda_den(DUMMY_VAR__);
                    (void) lambda_den;  // dummy to suppress unused var warning
                    stan::math::initialize(lambda_den, DUMMY_VAR__);
                    stan::math::fill(lambda_den, DUMMY_VAR__);
                    stan::math::assign(lambda_den,sum(stan::model::rvalue(c, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "c")));
                    current_statement_begin__ = 339;
                    stan::math::assign(lambda1, pow((lambda_num / lambda_den), ((alpha_1 - 1) / alpha_1)));
                    }
                } else if (as_bool(logical_eq(model_num, 4))) {
                    {
                    current_statement_begin__ = 341;
                    local_scalar_t__ lambda_num(DUMMY_VAR__);
                    (void) lambda_num;  // dummy to suppress unused var warning
                    stan::math::initialize(lambda_num, DUMMY_VAR__);
                    stan::math::fill(lambda_num, DUMMY_VAR__);
                    stan::math::assign(lambda_num,(util - sum(stan::model::rvalue(c, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "c"))));
                    current_statement_begin__ = 342;
                    local_scalar_t__ lambda_den(DUMMY_VAR__);
                    (void) lambda_den;  // dummy to suppress unused var warning
                    stan::math::initialize(lambda_den, DUMMY_VAR__);
                    stan::math::fill(lambda_den, DUMMY_VAR__);
                    stan::math::assign(lambda_den,sum(stan::model::rvalue(g_psi, stan::model::cons_list(stan::model::index_min_max(1, M), stan::model::nil_index_list()), "g_psi")));
                    current_statement_begin__ = 343;
                    stan::math::assign(lambda1, inv(stan::math::exp((lambda_num / lambda_den))));
                    }
                }
                current_statement_begin__ = 349;
                if (as_bool((primitive_value(logical_gt(lambda1, get_base1(mu, std::min((M + 1), (nalts + 1)), "mu", 1))) || primitive_value(logical_eq(M, (nalts + 1)))))) {
                    current_statement_begin__ = 351;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 352;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    ((pow((lambda1 / get_base1(mu, m, "mu", 1)), inv((alpha_1 - 1))) - get_base1(d, m, "d", 1)) * get_base1(g, m, "g", 1)), 
                                    "assigning variable X");
                    }
                    current_statement_begin__ = 353;
                    stan::math::assign(exit, 1);
                } else if (as_bool(logical_lt(M, (nalts + 1)))) {
                    current_statement_begin__ = 356;
                    stan::math::assign(M, (M + 1));
                }
            }
            }
        } else if (as_bool(logical_eq(algo_gen, 1))) {
            {
            current_statement_begin__ = 359;
            local_scalar_t__ lambda_l(DUMMY_VAR__);
            (void) lambda_l;  // dummy to suppress unused var warning
            stan::math::initialize(lambda_l, DUMMY_VAR__);
            stan::math::fill(lambda_l, DUMMY_VAR__);
            current_statement_begin__ = 360;
            local_scalar_t__ lambda_u(DUMMY_VAR__);
            (void) lambda_u;  // dummy to suppress unused var warning
            stan::math::initialize(lambda_u, DUMMY_VAR__);
            stan::math::fill(lambda_u, DUMMY_VAR__);
            current_statement_begin__ = 361;
            validate_non_negative_index("parm_matrix", "(nalts + 1)", (nalts + 1));
            validate_non_negative_index("parm_matrix", "4", 4);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> parm_matrix((nalts + 1), 4);
            stan::math::initialize(parm_matrix, DUMMY_VAR__);
            stan::math::fill(parm_matrix, DUMMY_VAR__);
            current_statement_begin__ = 362;
            validate_non_negative_index("psi_ord", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_ord((nalts + 1));
            stan::math::initialize(psi_ord, DUMMY_VAR__);
            stan::math::fill(psi_ord, DUMMY_VAR__);
            current_statement_begin__ = 363;
            validate_non_negative_index("mu", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu((nalts + 1));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 364;
            validate_non_negative_index("price_ord", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> price_ord((nalts + 1));
            stan::math::initialize(price_ord, DUMMY_VAR__);
            stan::math::fill(price_ord, DUMMY_VAR__);
            current_statement_begin__ = 365;
            validate_non_negative_index("a", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a((nalts + 1));
            stan::math::initialize(a, DUMMY_VAR__);
            stan::math::fill(a, DUMMY_VAR__);
            current_statement_begin__ = 366;
            validate_non_negative_index("g_psi_a", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> g_psi_a((nalts + 1));
            stan::math::initialize(g_psi_a, DUMMY_VAR__);
            stan::math::fill(g_psi_a, DUMMY_VAR__);
            current_statement_begin__ = 367;
            validate_non_negative_index("a_a_1", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a_a_1((nalts + 1));
            stan::math::initialize(a_a_1, DUMMY_VAR__);
            stan::math::fill(a_a_1, DUMMY_VAR__);
            current_statement_begin__ = 368;
            validate_non_negative_index("mu_a_a_1", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_a_a_1((nalts + 1));
            stan::math::initialize(mu_a_a_1, DUMMY_VAR__);
            stan::math::fill(mu_a_a_1, DUMMY_VAR__);
            current_statement_begin__ = 369;
            validate_non_negative_index("g__phi", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> g__phi((nalts + 1));
            stan::math::initialize(g__phi, DUMMY_VAR__);
            stan::math::fill(g__phi, DUMMY_VAR__);
            current_statement_begin__ = 370;
            local_scalar_t__ alpha_1(DUMMY_VAR__);
            (void) alpha_1;  // dummy to suppress unused var warning
            stan::math::initialize(alpha_1, DUMMY_VAR__);
            stan::math::fill(alpha_1, DUMMY_VAR__);
            current_statement_begin__ = 372;
            if (as_bool(logical_lt(model_num, 5))) {
                current_statement_begin__ = 373;
                stan::math::assign(parm_matrix, SortParmMatrix(MUzero, price, gamma, alpha, nalts, pstream__));
                current_statement_begin__ = 374;
                stan::math::assign(mu, col(parm_matrix, 1));
                current_statement_begin__ = 375;
                stan::math::assign(g__phi, col(parm_matrix, 3));
                current_statement_begin__ = 376;
                stan::math::assign(price_ord, col(parm_matrix, 2));
                current_statement_begin__ = 377;
                stan::math::assign(a, col(parm_matrix, 4));
                current_statement_begin__ = 378;
                stan::math::assign(a_a_1, elt_divide(a, subtract(a, 1)));
                current_statement_begin__ = 379;
                stan::math::assign(psi_ord, elt_multiply(mu, price_ord));
                current_statement_begin__ = 380;
                stan::math::assign(g_psi_a, elt_divide(elt_multiply(g__phi, psi_ord), a));
                current_statement_begin__ = 382;
                for (int j = 1; j <= (nalts + 1); ++j) {
                    current_statement_begin__ = 383;
                    stan::model::assign(mu_a_a_1, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                pow(inv(get_base1(mu, j, "mu", 1)), get_base1(a_a_1, j, "a_a_1", 1)), 
                                "assigning variable mu_a_a_1");
                }
            } else if (as_bool(logical_eq(model_num, 5))) {
                current_statement_begin__ = 386;
                stan::math::assign(alpha_1, get_base1(alpha, 1, "alpha", 1));
                current_statement_begin__ = 387;
                stan::math::assign(a, alpha);
                current_statement_begin__ = 388;
                stan::math::assign(parm_matrix, SortParmMatrix(MUzero, price, gamma, phi, nalts, pstream__));
                current_statement_begin__ = 389;
                stan::math::assign(mu, col(parm_matrix, 1));
                current_statement_begin__ = 390;
                stan::math::assign(g__phi, elt_divide(col(parm_matrix, 3), col(parm_matrix, 4)));
                current_statement_begin__ = 391;
                stan::math::assign(psi_ord, elt_multiply(elt_multiply(mu, col(parm_matrix, 2)), g__phi));
            }
            current_statement_begin__ = 394;
            while (as_bool(logical_eq(exit, 0))) {
                current_statement_begin__ = 395;
                stan::math::assign(lambda1, get_base1(mu, (M + 1), "mu", 1));
                current_statement_begin__ = 398;
                if (as_bool(logical_lt(model_num, 5))) {
                    current_statement_begin__ = 399;
                    stan::math::assign(util_new, ComputeUtilM(M, lambda1, g_psi_a, a_a_1, mu_a_a_1, psi_ord, g__phi, price_ord, d, model_num, pstream__));
                } else if (as_bool(logical_eq(model_num, 5))) {
                    current_statement_begin__ = 401;
                    stan::math::assign(util_new, ComputeKtUtilM(M, lambda1, psi_ord, mu, alpha_1, pstream__));
                }
                current_statement_begin__ = 403;
                if (as_bool((primitive_value(logical_gte(util_new, util)) || primitive_value(logical_eq((M + 1), (nalts + 1)))))) {
                    current_statement_begin__ = 404;
                    if (as_bool(logical_lt(util_new, util))) {
                        current_statement_begin__ = 405;
                        stan::math::assign(M, (M + 1));
                    }
                    current_statement_begin__ = 406;
                    stan::math::assign(lambda_l, (logical_lt(util_new, util) ? stan::math::promote_scalar<local_scalar_t__>(0) : stan::math::promote_scalar<local_scalar_t__>(lambda1) ));
                    current_statement_begin__ = 407;
                    stan::math::assign(lambda_u, get_base1(mu, M, "mu", 1));
                    current_statement_begin__ = 408;
                    stan::math::assign(lambda1, ((lambda_l + lambda_u) / 2));
                    current_statement_begin__ = 410;
                    for (int n = 1; n <= max_loop; ++n) {
                        {
                        current_statement_begin__ = 411;
                        local_scalar_t__ lambda_mid(DUMMY_VAR__);
                        (void) lambda_mid;  // dummy to suppress unused var warning
                        stan::math::initialize(lambda_mid, DUMMY_VAR__);
                        stan::math::fill(lambda_mid, DUMMY_VAR__);
                        stan::math::assign(lambda_mid,((lambda_l + lambda_u) / 2));
                        current_statement_begin__ = 413;
                        if (as_bool(logical_lt(model_num, 5))) {
                            current_statement_begin__ = 414;
                            stan::math::assign(util_new, ComputeUtilM(M, lambda1, g_psi_a, a_a_1, mu_a_a_1, psi_ord, g__phi, price_ord, d, model_num, pstream__));
                        } else if (as_bool(logical_eq(model_num, 5))) {
                            current_statement_begin__ = 416;
                            stan::math::assign(util_new, ComputeKtUtilM(M, lambda1, psi_ord, mu, alpha_1, pstream__));
                        }
                        current_statement_begin__ = 419;
                        if (as_bool(logical_lt(util_new, util))) {
                            current_statement_begin__ = 420;
                            stan::math::assign(lambda_u, lambda_mid);
                        } else if (as_bool(logical_gt(util_new, util))) {
                            current_statement_begin__ = 422;
                            stan::math::assign(lambda_l, lambda_mid);
                        }
                        current_statement_begin__ = 424;
                        stan::math::assign(lambda1, ((lambda_l + lambda_u) / 2));
                        current_statement_begin__ = 426;
                        if (as_bool(logical_lt(stan::math::fabs((((lambda_l - lambda_u) / (lambda_l + lambda_u)) * 0.5)), tol_l))) {
                            current_statement_begin__ = 426;
                            break;
                        }
                        }
                    }
                    current_statement_begin__ = 430;
                    for (int m = 1; m <= M; ++m) {
                        current_statement_begin__ = 431;
                        stan::model::assign(X, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    ((pow((lambda1 / get_base1(mu, m, "mu", 1)), inv((get_base1(a, m, "a", 1) - 1))) - get_base1(d, m, "d", 1)) * get_base1(g__phi, m, "g__phi", 1)), 
                                    "assigning variable X");
                    }
                    current_statement_begin__ = 433;
                    stan::math::assign(exit, 1);
                } else if (as_bool((primitive_value(logical_lt(util_new, util)) && primitive_value(logical_lt((M + 1), (nalts + 1)))))) {
                    current_statement_begin__ = 436;
                    stan::math::assign(M, (M + 1));
                }
            }
            }
        }
        current_statement_begin__ = 440;
        stan::math::assign(hdemand, stan::model::rvalue(X, stan::model::cons_list(stan::model::index_multi(order_x), stan::model::nil_index_list()), "X"));
        current_statement_begin__ = 442;
        return stan::math::promote_scalar<fun_return_scalar_t__>(hdemand);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct HicksianDemand_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T9__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T9__>::type>::type, Eigen::Dynamic, 1>
    operator()(const T0__& util,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& price,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& MUzero,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& phi,
                   const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& gamma,
                   const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& alpha,
                   const int& nalts,
                   const int& algo_gen,
                   const int& model_num,
                   const T9__& tol_l,
                   const int& max_loop, std::ostream* pstream__) const {
        return HicksianDemand(util, price, MUzero, phi, gamma, alpha, nalts, algo_gen, model_num, tol_l, max_loop, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T17__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T17__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
CalcWTP_rng(const T0__& income,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& quant_j,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& price,
                const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& price_p_policy,
                const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic> >& psi_p_sims,
                const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic> >& phi_p_sims,
                const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& psi_sims,
                const Eigen::Matrix<T7__, Eigen::Dynamic, Eigen::Dynamic>& phi_sims,
                const Eigen::Matrix<T8__, Eigen::Dynamic, Eigen::Dynamic>& gamma_sims,
                const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& alpha_sims,
                const Eigen::Matrix<T10__, Eigen::Dynamic, 1>& scale_sims,
                const int& nerrs,
                const int& cond_error,
                const int& draw_mlhs,
                const int& algo_gen,
                const int& model_num,
                const int& price_change_only,
                const T17__& tol,
                const int& max_loop, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T17__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 465;
        int nalts(0);
        (void) nalts;  // dummy to suppress unused var warning
        stan::math::fill(nalts, std::numeric_limits<int>::min());
        stan::math::assign(nalts,num_elements(quant_j));
        current_statement_begin__ = 466;
        int nsims(0);
        (void) nsims;  // dummy to suppress unused var warning
        stan::math::fill(nsims, std::numeric_limits<int>::min());
        stan::math::assign(nsims,num_elements(scale_sims));
        current_statement_begin__ = 467;
        int npols(0);
        (void) npols;  // dummy to suppress unused var warning
        stan::math::fill(npols, std::numeric_limits<int>::min());
        stan::math::assign(npols,size(price_p_policy));
        current_statement_begin__ = 468;
        validate_non_negative_index("wtp", "nsims", nsims);
        validate_non_negative_index("wtp", "npols", npols);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> wtp(nsims, npols);
        stan::math::initialize(wtp, DUMMY_VAR__);
        stan::math::fill(wtp, DUMMY_VAR__);
        current_statement_begin__ = 469;
        local_scalar_t__ quant_num(DUMMY_VAR__);
        (void) quant_num;  // dummy to suppress unused var warning
        stan::math::initialize(quant_num, DUMMY_VAR__);
        stan::math::fill(quant_num, DUMMY_VAR__);
        stan::math::assign(quant_num,(income - multiply(transpose(quant_j), stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "price"))));
        current_statement_begin__ = 471;
        for (int sim = 1; sim <= nsims; ++sim) {
            {
            current_statement_begin__ = 472;
            validate_non_negative_index("psi_j", "nalts", nalts);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_j(nalts);
            stan::math::initialize(psi_j, DUMMY_VAR__);
            stan::math::fill(psi_j, DUMMY_VAR__);
            stan::math::assign(psi_j,transpose(get_base1(psi_sims, sim, "psi_sims", 1)));
            current_statement_begin__ = 473;
            validate_non_negative_index("phi", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi((nalts + 1));
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 474;
            validate_non_negative_index("psi_p_policy", "npols", npols);
            validate_non_negative_index("psi_p_policy", "nalts", nalts);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> psi_p_policy(npols, nalts);
            stan::math::initialize(psi_p_policy, DUMMY_VAR__);
            stan::math::fill(psi_p_policy, DUMMY_VAR__);
            current_statement_begin__ = 475;
            validate_non_negative_index("gamma", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma((nalts + 1));
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            stan::math::assign(gamma,append_row(1, transpose(get_base1(gamma_sims, sim, "gamma_sims", 1))));
            current_statement_begin__ = 476;
            validate_non_negative_index("alpha", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha((nalts + 1));
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            stan::math::assign(alpha,transpose(get_base1(alpha_sims, sim, "alpha_sims", 1)));
            current_statement_begin__ = 477;
            local_scalar_t__ scale(DUMMY_VAR__);
            (void) scale;  // dummy to suppress unused var warning
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            stan::math::assign(scale,get_base1(scale_sims, sim, "scale_sims", 1));
            current_statement_begin__ = 478;
            validate_non_negative_index("error", "(nalts + 1)", (nalts + 1));
            validate_non_negative_index("error", "nerrs", nerrs);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > error(nerrs, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((nalts + 1)));
            stan::math::initialize(error, DUMMY_VAR__);
            stan::math::fill(error, DUMMY_VAR__);
            current_statement_begin__ = 479;
            validate_non_negative_index("wtp_policy", "npols", npols);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> wtp_policy(npols);
            stan::math::initialize(wtp_policy, DUMMY_VAR__);
            stan::math::fill(wtp_policy, DUMMY_VAR__);
            current_statement_begin__ = 480;
            validate_non_negative_index("util", "nerrs", nerrs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> util(nerrs);
            stan::math::initialize(util, DUMMY_VAR__);
            stan::math::fill(util, DUMMY_VAR__);
            current_statement_begin__ = 482;
            if (as_bool(logical_eq(price_change_only, 0))) {
                current_statement_begin__ = 483;
                stan::math::assign(psi_p_policy, get_base1(psi_p_sims, sim, "psi_p_sims", 1));
            }
            current_statement_begin__ = 485;
            if (as_bool(logical_lt(model_num, 5))) {
                current_statement_begin__ = 486;
                stan::math::assign(phi, rep_vector(1, (nalts + 1)));
            } else if (as_bool(logical_eq(model_num, 5))) {
                current_statement_begin__ = 488;
                stan::math::assign(phi, append_row(1, transpose(get_base1(phi_sims, sim, "phi_sims", 1))));
            }
            current_statement_begin__ = 490;
            stan::math::assign(error, DrawError_rng(quant_num, quant_j, stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "price"), psi_j, stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "phi"), stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "gamma"), alpha, scale, model_num, nalts, nerrs, cond_error, draw_mlhs, base_rng__, pstream__));
            current_statement_begin__ = 495;
            for (int err = 1; err <= nerrs; ++err) {
                {
                current_statement_begin__ = 496;
                validate_non_negative_index("mdemand", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mdemand((nalts + 1));
                stan::math::initialize(mdemand, DUMMY_VAR__);
                stan::math::fill(mdemand, DUMMY_VAR__);
                current_statement_begin__ = 497;
                validate_non_negative_index("MUzero_b", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> MUzero_b((nalts + 1));
                stan::math::initialize(MUzero_b, DUMMY_VAR__);
                stan::math::fill(MUzero_b, DUMMY_VAR__);
                current_statement_begin__ = 498;
                validate_non_negative_index("psi_b_err", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_b_err((nalts + 1));
                stan::math::initialize(psi_b_err, DUMMY_VAR__);
                stan::math::fill(psi_b_err, DUMMY_VAR__);
                stan::math::assign(psi_b_err,stan::math::exp(add(append_row(0, psi_j), get_base1(error, err, "error", 1))));
                current_statement_begin__ = 499;
                stan::math::assign(MUzero_b, elt_divide(psi_b_err, price));
                current_statement_begin__ = 500;
                if (as_bool(logical_eq(model_num, 5))) {
                    current_statement_begin__ = 501;
                    stan::math::assign(MUzero_b, elt_divide(elt_multiply(MUzero_b, phi), gamma));
                }
                current_statement_begin__ = 503;
                if (as_bool(logical_eq(cond_error, 1))) {
                    current_statement_begin__ = 504;
                    stan::math::assign(mdemand, append_row(quant_num, quant_j));
                } else if (as_bool(logical_eq(cond_error, 0))) {
                    current_statement_begin__ = 506;
                    stan::math::assign(mdemand, MarshallianDemand(income, price, MUzero_b, phi, gamma, alpha, nalts, algo_gen, model_num, tol, max_loop, pstream__));
                }
                current_statement_begin__ = 509;
                stan::model::assign(util, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                            ComputeUtilJ(income, stan::model::rvalue(mdemand, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "mdemand"), stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "price"), psi_b_err, stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "phi"), stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "gamma"), alpha, nalts, model_num, pstream__), 
                            "assigning variable util");
                }
            }
            current_statement_begin__ = 514;
            for (int policy = 1; policy <= npols; ++policy) {
                {
                current_statement_begin__ = 515;
                validate_non_negative_index("price_p", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> price_p((nalts + 1));
                stan::math::initialize(price_p, DUMMY_VAR__);
                stan::math::fill(price_p, DUMMY_VAR__);
                stan::math::assign(price_p,add(price, get_base1(price_p_policy, policy, "price_p_policy", 1)));
                current_statement_begin__ = 516;
                validate_non_negative_index("psi_p", "nalts", nalts);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_p(nalts);
                stan::math::initialize(psi_p, DUMMY_VAR__);
                stan::math::fill(psi_p, DUMMY_VAR__);
                current_statement_begin__ = 517;
                validate_non_negative_index("wtp_err", "nerrs", nerrs);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> wtp_err(nerrs);
                stan::math::initialize(wtp_err, DUMMY_VAR__);
                stan::math::fill(wtp_err, DUMMY_VAR__);
                current_statement_begin__ = 519;
                if (as_bool(logical_eq(price_change_only, 0))) {
                    current_statement_begin__ = 520;
                    stan::math::assign(psi_p, transpose(get_base1(psi_p_policy, policy, "psi_p_policy", 1)));
                } else {
                    current_statement_begin__ = 522;
                    stan::math::assign(psi_p, psi_j);
                }
                current_statement_begin__ = 524;
                for (int err = 1; err <= nerrs; ++err) {
                    {
                    current_statement_begin__ = 525;
                    validate_non_negative_index("hdemand", "(nalts + 1)", (nalts + 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> hdemand((nalts + 1));
                    stan::math::initialize(hdemand, DUMMY_VAR__);
                    stan::math::fill(hdemand, DUMMY_VAR__);
                    current_statement_begin__ = 526;
                    validate_non_negative_index("MUzero_p", "(nalts + 1)", (nalts + 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> MUzero_p((nalts + 1));
                    stan::math::initialize(MUzero_p, DUMMY_VAR__);
                    stan::math::fill(MUzero_p, DUMMY_VAR__);
                    stan::math::assign(MUzero_p,elt_divide(stan::math::exp(add(append_row(0, psi_p), get_base1(error, err, "error", 1))), price_p));
                    current_statement_begin__ = 527;
                    if (as_bool(logical_eq(model_num, 5))) {
                        current_statement_begin__ = 528;
                        stan::math::assign(MUzero_p, elt_divide(elt_multiply(MUzero_p, phi), gamma));
                    }
                    current_statement_begin__ = 530;
                    stan::math::assign(hdemand, HicksianDemand(get_base1(util, err, "util", 1), price_p, MUzero_p, phi, gamma, alpha, nalts, algo_gen, model_num, tol, max_loop, pstream__));
                    current_statement_begin__ = 533;
                    stan::model::assign(wtp_err, 
                                stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                                (income - multiply(transpose(price_p), hdemand)), 
                                "assigning variable wtp_err");
                    }
                }
                current_statement_begin__ = 535;
                stan::model::assign(wtp_policy, 
                            stan::model::cons_list(stan::model::index_uni(policy), stan::model::nil_index_list()), 
                            mean(wtp_err), 
                            "assigning variable wtp_policy");
                }
            }
            current_statement_begin__ = 537;
            stan::model::assign(wtp, 
                        stan::model::cons_list(stan::model::index_uni(sim), stan::model::nil_index_list()), 
                        transpose(wtp_policy), 
                        "assigning variable wtp");
            }
        }
        current_statement_begin__ = 539;
        return stan::math::promote_scalar<fun_return_scalar_t__>(wtp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct CalcWTP_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T17__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T17__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& income,
                const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& quant_j,
                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& price,
                const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& price_p_policy,
                const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic> >& psi_p_sims,
                const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic> >& phi_p_sims,
                const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& psi_sims,
                const Eigen::Matrix<T7__, Eigen::Dynamic, Eigen::Dynamic>& phi_sims,
                const Eigen::Matrix<T8__, Eigen::Dynamic, Eigen::Dynamic>& gamma_sims,
                const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& alpha_sims,
                const Eigen::Matrix<T10__, Eigen::Dynamic, 1>& scale_sims,
                const int& nerrs,
                const int& cond_error,
                const int& draw_mlhs,
                const int& algo_gen,
                const int& model_num,
                const int& price_change_only,
                const T17__& tol,
                const int& max_loop, RNG& base_rng__, std::ostream* pstream__) const {
        return CalcWTP_rng(income, quant_j, price, price_p_policy, psi_p_sims, phi_p_sims, psi_sims, phi_sims, gamma_sims, alpha_sims, scale_sims, nerrs, cond_error, draw_mlhs, algo_gen, model_num, price_change_only, tol, max_loop, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T17__, class RNG>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T17__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
CalcMarshallianDemand_rng(const T0__& income,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& quant_j,
                              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& price,
                              const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& price_p_policy,
                              const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic> >& psi_p_sims,
                              const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic> >& phi_p_sims,
                              const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& psi_sims,
                              const Eigen::Matrix<T7__, Eigen::Dynamic, Eigen::Dynamic>& phi_sims,
                              const Eigen::Matrix<T8__, Eigen::Dynamic, Eigen::Dynamic>& gamma_sims,
                              const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& alpha_sims,
                              const Eigen::Matrix<T10__, Eigen::Dynamic, 1>& scale_sims,
                              const int& nerrs,
                              const int& cond_error,
                              const int& draw_mlhs,
                              const int& algo_gen,
                              const int& model_num,
                              const int& price_change_only,
                              const T17__& tol,
                              const int& max_loop, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T17__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 548;
        int nalts(0);
        (void) nalts;  // dummy to suppress unused var warning
        stan::math::fill(nalts, std::numeric_limits<int>::min());
        stan::math::assign(nalts,num_elements(quant_j));
        current_statement_begin__ = 549;
        int nsims(0);
        (void) nsims;  // dummy to suppress unused var warning
        stan::math::fill(nsims, std::numeric_limits<int>::min());
        stan::math::assign(nsims,num_elements(scale_sims));
        current_statement_begin__ = 550;
        int npols(0);
        (void) npols;  // dummy to suppress unused var warning
        stan::math::fill(npols, std::numeric_limits<int>::min());
        stan::math::assign(npols,size(price_p_policy));
        current_statement_begin__ = 551;
        validate_non_negative_index("mdemand_out", "npols", npols);
        validate_non_negative_index("mdemand_out", "(nalts + 1)", (nalts + 1));
        validate_non_negative_index("mdemand_out", "nsims", nsims);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > mdemand_out(nsims, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(npols, (nalts + 1)));
        stan::math::initialize(mdemand_out, DUMMY_VAR__);
        stan::math::fill(mdemand_out, DUMMY_VAR__);
        current_statement_begin__ = 552;
        local_scalar_t__ quant_num(DUMMY_VAR__);
        (void) quant_num;  // dummy to suppress unused var warning
        stan::math::initialize(quant_num, DUMMY_VAR__);
        stan::math::fill(quant_num, DUMMY_VAR__);
        stan::math::assign(quant_num,(income - multiply(transpose(quant_j), stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "price"))));
        current_statement_begin__ = 554;
        for (int sim = 1; sim <= nsims; ++sim) {
            {
            current_statement_begin__ = 555;
            validate_non_negative_index("psi_j", "nalts", nalts);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_j(nalts);
            stan::math::initialize(psi_j, DUMMY_VAR__);
            stan::math::fill(psi_j, DUMMY_VAR__);
            stan::math::assign(psi_j,transpose(get_base1(psi_sims, sim, "psi_sims", 1)));
            current_statement_begin__ = 556;
            validate_non_negative_index("phi", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi((nalts + 1));
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 557;
            validate_non_negative_index("psi_p_policy", "npols", npols);
            validate_non_negative_index("psi_p_policy", "nalts", nalts);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> psi_p_policy(npols, nalts);
            stan::math::initialize(psi_p_policy, DUMMY_VAR__);
            stan::math::fill(psi_p_policy, DUMMY_VAR__);
            current_statement_begin__ = 558;
            validate_non_negative_index("gamma", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma((nalts + 1));
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            stan::math::assign(gamma,append_row(1, transpose(get_base1(gamma_sims, sim, "gamma_sims", 1))));
            current_statement_begin__ = 559;
            validate_non_negative_index("alpha", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha((nalts + 1));
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            stan::math::assign(alpha,transpose(get_base1(alpha_sims, sim, "alpha_sims", 1)));
            current_statement_begin__ = 560;
            local_scalar_t__ scale(DUMMY_VAR__);
            (void) scale;  // dummy to suppress unused var warning
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            stan::math::assign(scale,get_base1(scale_sims, sim, "scale_sims", 1));
            current_statement_begin__ = 561;
            validate_non_negative_index("error", "(nalts + 1)", (nalts + 1));
            validate_non_negative_index("error", "nerrs", nerrs);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > error(nerrs, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((nalts + 1)));
            stan::math::initialize(error, DUMMY_VAR__);
            stan::math::fill(error, DUMMY_VAR__);
            current_statement_begin__ = 562;
            validate_non_negative_index("mdemand_pols", "npols", npols);
            validate_non_negative_index("mdemand_pols", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mdemand_pols(npols, (nalts + 1));
            stan::math::initialize(mdemand_pols, DUMMY_VAR__);
            stan::math::fill(mdemand_pols, DUMMY_VAR__);
            current_statement_begin__ = 563;
            validate_non_negative_index("util", "nerrs", nerrs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> util(nerrs);
            stan::math::initialize(util, DUMMY_VAR__);
            stan::math::fill(util, DUMMY_VAR__);
            current_statement_begin__ = 565;
            if (as_bool(logical_eq(price_change_only, 0))) {
                current_statement_begin__ = 566;
                stan::math::assign(psi_p_policy, get_base1(psi_p_sims, sim, "psi_p_sims", 1));
            }
            current_statement_begin__ = 568;
            if (as_bool(logical_lt(model_num, 5))) {
                current_statement_begin__ = 569;
                stan::math::assign(phi, rep_vector(1, (nalts + 1)));
            } else if (as_bool(logical_eq(model_num, 5))) {
                current_statement_begin__ = 571;
                stan::math::assign(phi, append_row(1, transpose(get_base1(phi_sims, sim, "phi_sims", 1))));
            }
            current_statement_begin__ = 573;
            stan::math::assign(error, DrawError_rng(quant_num, quant_j, stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "price"), psi_j, stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "phi"), stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "gamma"), alpha, scale, model_num, nalts, nerrs, cond_error, draw_mlhs, base_rng__, pstream__));
            current_statement_begin__ = 578;
            for (int err = 1; err <= nerrs; ++err) {
                {
                current_statement_begin__ = 579;
                validate_non_negative_index("mdemand_util", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mdemand_util((nalts + 1));
                stan::math::initialize(mdemand_util, DUMMY_VAR__);
                stan::math::fill(mdemand_util, DUMMY_VAR__);
                current_statement_begin__ = 580;
                validate_non_negative_index("MUzero_b", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> MUzero_b((nalts + 1));
                stan::math::initialize(MUzero_b, DUMMY_VAR__);
                stan::math::fill(MUzero_b, DUMMY_VAR__);
                current_statement_begin__ = 581;
                validate_non_negative_index("psi_b_err", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_b_err((nalts + 1));
                stan::math::initialize(psi_b_err, DUMMY_VAR__);
                stan::math::fill(psi_b_err, DUMMY_VAR__);
                stan::math::assign(psi_b_err,stan::math::exp(add(append_row(0, psi_j), get_base1(error, err, "error", 1))));
                current_statement_begin__ = 582;
                stan::math::assign(MUzero_b, elt_divide(psi_b_err, price));
                current_statement_begin__ = 583;
                if (as_bool(logical_eq(model_num, 5))) {
                    current_statement_begin__ = 584;
                    stan::math::assign(MUzero_b, elt_divide(elt_multiply(MUzero_b, phi), gamma));
                }
                current_statement_begin__ = 586;
                if (as_bool(logical_eq(cond_error, 1))) {
                    current_statement_begin__ = 587;
                    stan::math::assign(mdemand_util, append_row(quant_num, quant_j));
                } else if (as_bool(logical_eq(cond_error, 0))) {
                    current_statement_begin__ = 589;
                    stan::math::assign(mdemand_util, MarshallianDemand(income, price, MUzero_b, phi, gamma, alpha, nalts, algo_gen, model_num, tol, max_loop, pstream__));
                }
                current_statement_begin__ = 592;
                stan::model::assign(util, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::nil_index_list()), 
                            ComputeUtilJ(income, stan::model::rvalue(mdemand_util, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "mdemand_util"), stan::model::rvalue(price, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "price"), psi_b_err, stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "phi"), stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max(2, (nalts + 1)), stan::model::nil_index_list()), "gamma"), alpha, nalts, model_num, pstream__), 
                            "assigning variable util");
                }
            }
            current_statement_begin__ = 597;
            for (int policy = 1; policy <= npols; ++policy) {
                {
                current_statement_begin__ = 598;
                validate_non_negative_index("price_p", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> price_p((nalts + 1));
                stan::math::initialize(price_p, DUMMY_VAR__);
                stan::math::fill(price_p, DUMMY_VAR__);
                stan::math::assign(price_p,add(price, get_base1(price_p_policy, policy, "price_p_policy", 1)));
                current_statement_begin__ = 599;
                validate_non_negative_index("psi_p", "nalts", nalts);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi_p(nalts);
                stan::math::initialize(psi_p, DUMMY_VAR__);
                stan::math::fill(psi_p, DUMMY_VAR__);
                current_statement_begin__ = 600;
                validate_non_negative_index("mdemand_p", "(nalts + 1)", (nalts + 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mdemand_p((nalts + 1));
                stan::math::initialize(mdemand_p, DUMMY_VAR__);
                stan::math::fill(mdemand_p, DUMMY_VAR__);
                stan::math::assign(mdemand_p,rep_vector(0, (nalts + 1)));
                current_statement_begin__ = 602;
                if (as_bool(logical_eq(price_change_only, 0))) {
                    current_statement_begin__ = 603;
                    stan::math::assign(psi_p, transpose(get_base1(psi_p_policy, policy, "psi_p_policy", 1)));
                } else {
                    current_statement_begin__ = 605;
                    stan::math::assign(psi_p, psi_j);
                }
                current_statement_begin__ = 607;
                for (int err = 1; err <= nerrs; ++err) {
                    {
                    current_statement_begin__ = 608;
                    validate_non_negative_index("MUzero_p", "(nalts + 1)", (nalts + 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> MUzero_p((nalts + 1));
                    stan::math::initialize(MUzero_p, DUMMY_VAR__);
                    stan::math::fill(MUzero_p, DUMMY_VAR__);
                    stan::math::assign(MUzero_p,elt_divide(stan::math::exp(add(append_row(0, psi_p), get_base1(error, err, "error", 1))), price_p));
                    current_statement_begin__ = 609;
                    if (as_bool(logical_eq(model_num, 5))) {
                        current_statement_begin__ = 610;
                        stan::math::assign(MUzero_p, elt_divide(elt_multiply(MUzero_p, phi), gamma));
                    }
                    current_statement_begin__ = 612;
                    stan::math::assign(mdemand_p, add(mdemand_p, divide(MarshallianDemand(income, price_p, MUzero_p, phi, gamma, alpha, nalts, algo_gen, model_num, tol, max_loop, pstream__), nerrs)));
                    }
                }
                current_statement_begin__ = 615;
                stan::model::assign(mdemand_pols, 
                            stan::model::cons_list(stan::model::index_uni(policy), stan::model::nil_index_list()), 
                            transpose(mdemand_p), 
                            "assigning variable mdemand_pols");
                }
            }
            current_statement_begin__ = 617;
            stan::model::assign(mdemand_out, 
                        stan::model::cons_list(stan::model::index_uni(sim), stan::model::nil_index_list()), 
                        mdemand_pols, 
                        "assigning variable mdemand_out");
            }
        }
        current_statement_begin__ = 619;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mdemand_out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct CalcMarshallianDemand_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T17__, class RNG>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__, T9__, T10__, T17__>::type>::type>::type, Eigen::Dynamic, Eigen::Dynamic> >
    operator()(const T0__& income,
                              const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& quant_j,
                              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& price,
                              const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic, 1> >& price_p_policy,
                              const std::vector<Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic> >& psi_p_sims,
                              const std::vector<Eigen::Matrix<T5__, Eigen::Dynamic, Eigen::Dynamic> >& phi_p_sims,
                              const Eigen::Matrix<T6__, Eigen::Dynamic, Eigen::Dynamic>& psi_sims,
                              const Eigen::Matrix<T7__, Eigen::Dynamic, Eigen::Dynamic>& phi_sims,
                              const Eigen::Matrix<T8__, Eigen::Dynamic, Eigen::Dynamic>& gamma_sims,
                              const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& alpha_sims,
                              const Eigen::Matrix<T10__, Eigen::Dynamic, 1>& scale_sims,
                              const int& nerrs,
                              const int& cond_error,
                              const int& draw_mlhs,
                              const int& algo_gen,
                              const int& model_num,
                              const int& price_change_only,
                              const T17__& tol,
                              const int& max_loop, RNG& base_rng__, std::ostream* pstream__) const {
        return CalcMarshallianDemand_rng(income, quant_j, price, price_p_policy, psi_p_sims, phi_p_sims, psi_sims, phi_sims, gamma_sims, alpha_sims, scale_sims, nerrs, cond_error, draw_mlhs, algo_gen, model_num, price_change_only, tol, max_loop, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T10__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T10__>::type>::type, Eigen::Dynamic, 1>
CalcmdemandOne_rng(const T0__& income,
                       const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& price,
                       const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& psi_j,
                       const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& phi_j,
                       const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& gamma_j,
                       const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& alpha,
                       const T6__& scale,
                       const int& nerrs,
                       const int& model_num,
                       const int& algo_gen,
                       const T10__& tol,
                       const int& max_loop, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T10__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 629;
        int nalts(0);
        (void) nalts;  // dummy to suppress unused var warning
        stan::math::fill(nalts, std::numeric_limits<int>::min());
        stan::math::assign(nalts,(num_elements(price) - 1));
        current_statement_begin__ = 630;
        validate_non_negative_index("mdemand", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mdemand((nalts + 1));
        stan::math::initialize(mdemand, DUMMY_VAR__);
        stan::math::fill(mdemand, DUMMY_VAR__);
        stan::math::assign(mdemand,rep_vector(0, (nalts + 1)));
        current_statement_begin__ = 631;
        validate_non_negative_index("gamma", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma((nalts + 1));
        stan::math::initialize(gamma, DUMMY_VAR__);
        stan::math::fill(gamma, DUMMY_VAR__);
        stan::math::assign(gamma,append_row(1, gamma_j));
        current_statement_begin__ = 632;
        validate_non_negative_index("phi", "(nalts + 1)", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi((nalts + 1));
        stan::math::initialize(phi, DUMMY_VAR__);
        stan::math::fill(phi, DUMMY_VAR__);
        current_statement_begin__ = 633;
        validate_non_negative_index("error", "(nalts + 1)", (nalts + 1));
        validate_non_negative_index("error", "nerrs", nerrs);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > error(nerrs, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>((nalts + 1)));
        stan::math::initialize(error, DUMMY_VAR__);
        stan::math::fill(error, DUMMY_VAR__);
        current_statement_begin__ = 635;
        if (as_bool(logical_lt(model_num, 5))) {
            current_statement_begin__ = 636;
            stan::math::assign(phi, rep_vector(1, (nalts + 1)));
        } else if (as_bool(logical_eq(model_num, 5))) {
            current_statement_begin__ = 638;
            stan::math::assign(phi, append_row(1, phi_j));
        }
        current_statement_begin__ = 640;
        for (int err = 1; err <= nerrs; ++err) {
            current_statement_begin__ = 641;
            for (int g = 1; g <= (nalts + 1); ++g) {
                current_statement_begin__ = 642;
                stan::model::assign(error, 
                            stan::model::cons_list(stan::model::index_uni(err), stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list())), 
                            (-(stan::math::log(-(stan::math::log(uniform_rng(0, 1, base_rng__))))) * scale), 
                            "assigning variable error");
            }
        }
        current_statement_begin__ = 645;
        for (int err = 1; err <= nerrs; ++err) {
            {
            current_statement_begin__ = 646;
            validate_non_negative_index("MUzero_b", "(nalts + 1)", (nalts + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> MUzero_b((nalts + 1));
            stan::math::initialize(MUzero_b, DUMMY_VAR__);
            stan::math::fill(MUzero_b, DUMMY_VAR__);
            stan::math::assign(MUzero_b,elt_divide(stan::math::exp(add(append_row(0, psi_j), get_base1(error, err, "error", 1))), price));
            current_statement_begin__ = 647;
            if (as_bool(logical_eq(model_num, 5))) {
                current_statement_begin__ = 648;
                stan::math::assign(MUzero_b, elt_divide(elt_multiply(MUzero_b, phi), gamma));
            }
            current_statement_begin__ = 650;
            stan::math::assign(mdemand, add(mdemand, divide(MarshallianDemand(income, price, MUzero_b, phi, gamma, alpha, nalts, algo_gen, model_num, tol, max_loop, pstream__), nerrs)));
            }
        }
        current_statement_begin__ = 654;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mdemand);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct CalcmdemandOne_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T10__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T10__>::type>::type, Eigen::Dynamic, 1>
    operator()(const T0__& income,
                       const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& price,
                       const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& psi_j,
                       const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& phi_j,
                       const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& gamma_j,
                       const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& alpha,
                       const T6__& scale,
                       const int& nerrs,
                       const int& model_num,
                       const int& algo_gen,
                       const T10__& tol,
                       const int& max_loop, RNG& base_rng__, std::ostream* pstream__) const {
        return CalcmdemandOne_rng(income, price, psi_j, phi_j, gamma_j, alpha, scale, nerrs, model_num, algo_gen, tol, max_loop, base_rng__, pstream__);
    }
};
 } 
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
Shuffle_rng(const Eigen::Matrix<double, Eigen::Dynamic, 1>& inv_temp,
                const int& nerrs, boost::ecuyer1988& base_rng__, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::Shuffle_rng<double, boost::ecuyer1988>(inv_temp, nerrs, base_rng__, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
DrawMlhs_rng(const int& nerrs,
                 const int& draw_mlhs, boost::ecuyer1988& base_rng__, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::DrawMlhs_rng<boost::ecuyer1988>(nerrs, draw_mlhs, base_rng__, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >
DrawError_rng(const double& quant_num,
                  const Eigen::Matrix<double, Eigen::Dynamic, 1>& quant_j,
                  const Eigen::Matrix<double, Eigen::Dynamic, 1>& price_j,
                  const Eigen::Matrix<double, Eigen::Dynamic, 1>& psi_j,
                  const Eigen::Matrix<double, Eigen::Dynamic, 1>& phi_j,
                  const Eigen::Matrix<double, Eigen::Dynamic, 1>& gamma_j,
                  const Eigen::Matrix<double, Eigen::Dynamic, 1>& alpha,
                  const double& scale,
                  const int& model_num,
                  const int& nalts,
                  const int& nerrs,
                  const int& cond_error,
                  const int& draw_mlhs, boost::ecuyer1988& base_rng__, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::DrawError_rng<double, double, double, double, double, double, double, double, boost::ecuyer1988>(quant_num, quant_j, price_j, psi_j, phi_j, gamma_j, alpha, scale, model_num, nalts, nerrs, cond_error, draw_mlhs, base_rng__, pstream__);
}
// [[Rcpp::export]]
std::vector<int>
CalcAltOrder(const Eigen::Matrix<double, Eigen::Dynamic, 1>& MUzero,
                 const int& nalts, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::CalcAltOrder<double>(MUzero, nalts, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
SortParmMatrix(const Eigen::Matrix<double, Eigen::Dynamic, 1>& MUzero,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& price,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& gamma,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& alpha_phi,
                   const int& nalts, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::SortParmMatrix<double, double, double, double>(MUzero, price, gamma, alpha_phi, nalts, pstream__);
}
// [[Rcpp::export]]
double
ComputeE(const int& M,
             const double& lambda,
             const Eigen::Matrix<double, Eigen::Dynamic, 1>& g_price__phi,
             const Eigen::Matrix<double, Eigen::Dynamic, 1>& b,
             const Eigen::Matrix<double, Eigen::Dynamic, 1>& c,
             const Eigen::Matrix<double, Eigen::Dynamic, 1>& d, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::ComputeE<double, double, double, double, double>(M, lambda, g_price__phi, b, c, d, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
MarshallianDemand(const double& income,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& price,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& MUzero,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& phi,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& gamma,
                      const Eigen::Matrix<double, Eigen::Dynamic, 1>& alpha,
                      const int& nalts,
                      const int& algo_gen,
                      const int& model_num,
                      const double& tol_e,
                      const int& max_loop, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::MarshallianDemand<double, double, double, double, double, double, double>(income, price, MUzero, phi, gamma, alpha, nalts, algo_gen, model_num, tol_e, max_loop, pstream__);
}
// [[Rcpp::export]]
double
ComputeUtilJ(const double& income,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& quant_j,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& price_j,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& psi,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& phi_j,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& gamma_j,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& alpha,
                 const int& nalts,
                 const int& model_num, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::ComputeUtilJ<double, double, double, double, double, double, double>(income, quant_j, price_j, psi, phi_j, gamma_j, alpha, nalts, model_num, pstream__);
}
// [[Rcpp::export]]
double
ComputeUtilM(const int& M,
                 const double& lambda1,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& g_psi_a,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& a_a_1,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& mu_a_a_1,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& psi,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& g,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& price,
                 const Eigen::Matrix<double, Eigen::Dynamic, 1>& d,
                 const int& model_num, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::ComputeUtilM<double, double, double, double, double, double, double, double>(M, lambda1, g_psi_a, a_a_1, mu_a_a_1, psi, g, price, d, model_num, pstream__);
}
// [[Rcpp::export]]
double
ComputeKtUtilM(const int& M,
                   const double& lambda1,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& psi,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& mu,
                   const double& alpha_1, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::ComputeKtUtilM<double, double, double, double>(M, lambda1, psi, mu, alpha_1, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
HicksianDemand(const double& util,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& price,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& MUzero,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& phi,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& gamma,
                   const Eigen::Matrix<double, Eigen::Dynamic, 1>& alpha,
                   const int& nalts,
                   const int& algo_gen,
                   const int& model_num,
                   const double& tol_l,
                   const int& max_loop, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::HicksianDemand<double, double, double, double, double, double, double>(util, price, MUzero, phi, gamma, alpha, nalts, algo_gen, model_num, tol_l, max_loop, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
CalcWTP_rng(const double& income,
                const Eigen::Matrix<double, Eigen::Dynamic, 1>& quant_j,
                const Eigen::Matrix<double, Eigen::Dynamic, 1>& price,
                const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& price_p_policy,
                const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& psi_p_sims,
                const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& phi_p_sims,
                const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& psi_sims,
                const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& phi_sims,
                const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& gamma_sims,
                const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& alpha_sims,
                const Eigen::Matrix<double, Eigen::Dynamic, 1>& scale_sims,
                const int& nerrs,
                const int& cond_error,
                const int& draw_mlhs,
                const int& algo_gen,
                const int& model_num,
                const int& price_change_only,
                const double& tol,
                const int& max_loop, boost::ecuyer1988& base_rng__, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::CalcWTP_rng<double, double, double, double, double, double, double, double, double, double, double, double, boost::ecuyer1988>(income, quant_j, price, price_p_policy, psi_p_sims, phi_p_sims, psi_sims, phi_sims, gamma_sims, alpha_sims, scale_sims, nerrs, cond_error, draw_mlhs, algo_gen, model_num, price_change_only, tol, max_loop, base_rng__, pstream__);
}
// [[Rcpp::export]]
std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >
CalcMarshallianDemand_rng(const double& income,
                              const Eigen::Matrix<double, Eigen::Dynamic, 1>& quant_j,
                              const Eigen::Matrix<double, Eigen::Dynamic, 1>& price,
                              const std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >& price_p_policy,
                              const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& psi_p_sims,
                              const std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >& phi_p_sims,
                              const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& psi_sims,
                              const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& phi_sims,
                              const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& gamma_sims,
                              const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>& alpha_sims,
                              const Eigen::Matrix<double, Eigen::Dynamic, 1>& scale_sims,
                              const int& nerrs,
                              const int& cond_error,
                              const int& draw_mlhs,
                              const int& algo_gen,
                              const int& model_num,
                              const int& price_change_only,
                              const double& tol,
                              const int& max_loop, boost::ecuyer1988& base_rng__, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::CalcMarshallianDemand_rng<double, double, double, double, double, double, double, double, double, double, double, double, boost::ecuyer1988>(income, quant_j, price, price_p_policy, psi_p_sims, phi_p_sims, psi_sims, phi_sims, gamma_sims, alpha_sims, scale_sims, nerrs, cond_error, draw_mlhs, algo_gen, model_num, price_change_only, tol, max_loop, base_rng__, pstream__);
}
// [[Rcpp::export]]
Eigen::Matrix<double, Eigen::Dynamic, 1>
CalcmdemandOne_rng(const double& income,
                       const Eigen::Matrix<double, Eigen::Dynamic, 1>& price,
                       const Eigen::Matrix<double, Eigen::Dynamic, 1>& psi_j,
                       const Eigen::Matrix<double, Eigen::Dynamic, 1>& phi_j,
                       const Eigen::Matrix<double, Eigen::Dynamic, 1>& gamma_j,
                       const Eigen::Matrix<double, Eigen::Dynamic, 1>& alpha,
                       const double& scale,
                       const int& nerrs,
                       const int& model_num,
                       const int& algo_gen,
                       const double& tol,
                       const int& max_loop, boost::ecuyer1988& base_rng__, std::ostream* pstream__ = 0){
  return 
user_568f9190b415d08797081b11c764945a::CalcmdemandOne_rng<double, double, double, double, double, double, double, double, boost::ecuyer1988>(income, price, psi_j, phi_j, gamma_j, alpha, scale, nerrs, model_num, algo_gen, tol, max_loop, base_rng__, pstream__);
}
